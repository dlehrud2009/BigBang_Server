{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useSimulation } from \"../hooks/useSimulation\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ParticleCanvas() {\n  _s();\n  const mountRef = useRef();\n  const [isPaused, setIsPaused] = useState(false);\n  const [userId, setUserId] = useState(null);\n\n  // 서버에 자동 사용자 생성\n  useEffect(() => {\n    axios.post(\"http://localhost:4000/api/user\", {\n      username: \"testuser\"\n    }).then(res => setUserId(res.data.userid)).catch(err => console.error(err));\n  }, []);\n  const {\n    stage,\n    status,\n    startSimulation,\n    pauseSimulation\n  } = useSimulation(userId);\n\n  // ... 기존 Three.js 코드 그대로, mountRef, stage, isPaused, status 의존\n  // setupStage, animate 등\n  useEffect(() => {\n    if (!userId) return; // userid 없으면 Three.js 실행 안 함\n\n    const mount = mountRef.current;\n    if (!mount) return;\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 5000);\n    camera.position.z = 600;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n\n    // Lights\n    const pointLight = new THREE.PointLight(0xffffff, 3, 5000);\n    pointLight.position.set(0, 0, 0);\n    scene.add(pointLight);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n    let points = null;\n    let sun = null;\n    let planets = [];\n    const setupStage = () => {\n      const removable = scene.children.filter(obj => obj.userData.isPlanet || obj.userData.isSun || obj.userData.isOrbit || obj.userData.isBigBang || obj.userData.isGalaxy);\n      removable.forEach(obj => scene.remove(obj));\n      points = null;\n      sun = null;\n      planets = [];\n      if (stage === \"bigbang\" || stage === \"atom_formation\") {\n        const numParticles = 8000;\n        const geometry = new THREE.BufferGeometry();\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        for (let i = 0; i < numParticles; i++) {\n          positions[i * 3] = (Math.random() - 0.5) * 800;\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 800;\n          positions[i * 3 + 2] = (Math.random() - 0.5) * 800;\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        points = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true\n        }));\n        points.userData.isBigBang = true;\n        scene.add(points);\n      }\n      if (stage === \"galaxy_formation\") {\n        const generateGalaxy = require(\"../utils/galaxyUtils\").generateGalaxy;\n        points = generateGalaxy(5000);\n        points.userData.isGalaxy = true;\n        scene.add(points);\n      }\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        scene.add(sun);\n        planets = createPlanets(scene);\n      }\n    };\n    setupStage();\n    let frameId;\n    const animate = () => {\n      if (!isPaused && status !== \"paused\") {\n        if (stage === \"solar_system\" && sun) {\n          sun.rotation.y += 0.002;\n          planets.forEach(p => {\n            p.angle += p.speed;\n            p.mesh.position.x = p.radius * Math.cos(p.angle);\n            p.mesh.position.z = p.radius * Math.sin(p.angle);\n          });\n        } else if (points) {\n          points.rotation.z += 0.001;\n        }\n      }\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage, isPaused, status, userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 10,\n        display: \"flex\",\n        gap: \"8px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSimulation,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pauseSimulation,\n        children: status === \"paused\" ? \"Resume\" : \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(ParticleCanvas, \"Cf0OBimimknZaWYPilez77bkfb0=\", false, function () {\n  return [useSimulation];\n});\n_c = ParticleCanvas;\nvar _c;\n$RefreshReg$(_c, \"ParticleCanvas\");","map":{"version":3,"names":["useRef","useEffect","useState","THREE","CSS2DRenderer","OrbitControls","useSimulation","createSun","createPlanets","axios","jsxDEV","_jsxDEV","ParticleCanvas","_s","mountRef","isPaused","setIsPaused","userId","setUserId","post","username","then","res","data","userid","catch","err","console","error","stage","status","startSimulation","pauseSimulation","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","labelRenderer","style","top","controls","enableDamping","enablePan","pointLight","PointLight","set","add","ambientLight","AmbientLight","points","sun","planets","setupStage","removable","children","filter","obj","userData","isPlanet","isSun","isOrbit","isBigBang","isGalaxy","forEach","remove","numParticles","geometry","BufferGeometry","positions","Float32Array","colors","color","i","Math","random","c","setRGB","r","g","b","setAttribute","BufferAttribute","Points","PointsMaterial","size","vertexColors","generateGalaxy","require","frameId","animate","rotation","y","p","angle","speed","mesh","x","radius","cos","sin","update","render","requestAnimationFrame","cancelAnimationFrame","dispose","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","left","zIndex","display","gap","onClick","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useSimulation } from \"../hooks/useSimulation\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\nimport axios from \"axios\";\n\nexport default function ParticleCanvas() {\n  const mountRef = useRef();\n  const [isPaused, setIsPaused] = useState(false);\n  const [userId, setUserId] = useState(null);\n\n  // 서버에 자동 사용자 생성\n  useEffect(() => {\n    axios.post(\"http://localhost:4000/api/user\", { username: \"testuser\" })\n      .then(res => setUserId(res.data.userid))\n      .catch(err => console.error(err));\n  }, []);\n\n  const { stage, status, startSimulation, pauseSimulation } = useSimulation(userId);\n\n  // ... 기존 Three.js 코드 그대로, mountRef, stage, isPaused, status 의존\n  // setupStage, animate 등\n  useEffect(() => {\n    if (!userId) return; // userid 없으면 Three.js 실행 안 함\n\n    const mount = mountRef.current;\n    if (!mount) return;\n\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 5000);\n    camera.position.z = 600;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n\n    // Lights\n    const pointLight = new THREE.PointLight(0xffffff, 3, 5000);\n    pointLight.position.set(0, 0, 0);\n    scene.add(pointLight);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n\n    let points = null;\n    let sun = null;\n    let planets = [];\n\n    const setupStage = () => {\n      const removable = scene.children.filter(obj => obj.userData.isPlanet || obj.userData.isSun || obj.userData.isOrbit || obj.userData.isBigBang || obj.userData.isGalaxy);\n      removable.forEach(obj => scene.remove(obj));\n\n      points = null;\n      sun = null;\n      planets = [];\n\n      if (stage === \"bigbang\" || stage === \"atom_formation\") {\n        const numParticles = 8000;\n        const geometry = new THREE.BufferGeometry();\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n\n        for (let i = 0; i < numParticles; i++) {\n          positions[i * 3] = (Math.random() - 0.5) * 800;\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 800;\n          positions[i * 3 + 2] = (Math.random() - 0.5) * 800;\n\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        points = new THREE.Points(geometry, new THREE.PointsMaterial({ size: 2, vertexColors: true }));\n        points.userData.isBigBang = true;\n        scene.add(points);\n      }\n\n      if (stage === \"galaxy_formation\") {\n        const generateGalaxy = require(\"../utils/galaxyUtils\").generateGalaxy;\n        points = generateGalaxy(5000);\n        points.userData.isGalaxy = true;\n        scene.add(points);\n      }\n\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        scene.add(sun);\n        planets = createPlanets(scene);\n      }\n    };\n\n    setupStage();\n\n    let frameId;\n    const animate = () => {\n      if (!isPaused && status !== \"paused\") {\n        if (stage === \"solar_system\" && sun) {\n          sun.rotation.y += 0.002;\n          planets.forEach(p => {\n            p.angle += p.speed;\n            p.mesh.position.x = p.radius * Math.cos(p.angle);\n            p.mesh.position.z = p.radius * Math.sin(p.angle);\n          });\n        } else if (points) {\n          points.rotation.z += 0.001;\n        }\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage, isPaused, status, userId]);\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"600px\" }}>\n      <div ref={mountRef} style={{ width: \"100%\", height: \"100%\" }} />\n\n      <div style={{ position: \"absolute\", top: 10, left: 10, zIndex: 10, display: \"flex\", gap: \"8px\" }}>\n        <button onClick={startSimulation}>Start</button>\n        <button onClick={pauseSimulation}>{status === \"paused\" ? \"Resume\" : \"Pause\"}</button>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}