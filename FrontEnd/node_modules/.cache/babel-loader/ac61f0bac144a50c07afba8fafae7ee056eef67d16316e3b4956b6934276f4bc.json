{"ast":null,"code":"// src/utils/solarSystem.js\nimport * as THREE from \"three\";\n\n// ----------------------\n// 스케일 상수\n// ----------------------\nconst SCALE_DISTANCE = 10; // 행성 거리 10배\nconst SCALE_SIZE = 10; // 행성 크기 10배\nconst SUN_SCALE = 10; // 태양 크기 10배\n\n// ----------------------\n// 태양계 행성 데이터\n// ----------------------\nexport const solarSystemPlanets = [{\n  name: \"Mercury\",\n  radius: 60 * SCALE_DISTANCE,\n  size: 3 * SCALE_SIZE,\n  color: 0x888888,\n  speed: 0.02\n}, {\n  name: \"Venus\",\n  radius: 90 * SCALE_DISTANCE,\n  size: 6 * SCALE_SIZE,\n  color: 0xffa500,\n  speed: 0.015\n}, {\n  name: \"Earth\",\n  radius: 120 * SCALE_DISTANCE,\n  size: 7 * SCALE_SIZE,\n  color: 0x00bfff,\n  speed: 0.01\n}, {\n  name: \"Mars\",\n  radius: 150 * SCALE_DISTANCE,\n  size: 5 * SCALE_SIZE,\n  color: 0xff0000,\n  speed: 0.008\n}, {\n  name: \"Jupiter\",\n  radius: 190 * SCALE_DISTANCE,\n  size: 12 * SCALE_SIZE,\n  color: 0x8b4513,\n  speed: 0.005\n}, {\n  name: \"Saturn\",\n  radius: 230 * SCALE_DISTANCE,\n  size: 10 * SCALE_SIZE,\n  color: 0xdaa520,\n  speed: 0.004,\n  ring: true\n}, {\n  name: \"Uranus\",\n  radius: 270 * SCALE_DISTANCE,\n  size: 9 * SCALE_SIZE,\n  color: 0xadd8e6,\n  speed: 0.003\n}, {\n  name: \"Neptune\",\n  radius: 310 * SCALE_DISTANCE,\n  size: 9 * SCALE_SIZE,\n  color: 0x00008b,\n  speed: 0.0025\n}];\n\n// ----------------------\n// 태양 생성\n// ----------------------\nexport function createSun() {\n  const geo = new THREE.SphereGeometry(10, 32, 32);\n  const mat = new THREE.MeshStandardMaterial({\n    color: 0xffff00,\n    emissive: 0xffff33,\n    emissiveIntensity: 1,\n    metalness: 0,\n    roughness: 0.4\n  });\n  const mesh = new THREE.Mesh(geo, mat);\n  mesh.scale.set(SUN_SCALE, SUN_SCALE, SUN_SCALE); // 태양 스케일 적용\n  mesh.userData.isSun = true;\n  return mesh;\n}\n\n// ----------------------\n// 행성 생성\n// ----------------------\nexport function createPlanets(scene) {\n  return solarSystemPlanets.map(p => {\n    const geo = new THREE.SphereGeometry(p.size, 32, 32);\n    const mat = new THREE.MeshStandardMaterial({\n      color: p.color,\n      metalness: 0,\n      roughness: 0.4\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 토성 고리\n    if (p.ring) {\n      const ringScale = 4; // 고리 강조용 스케일\n      const ringGeo = new THREE.RingGeometry(p.size + 5 * ringScale,\n      // 안쪽 반지름\n      p.size + 15 * ringScale,\n      // 바깥쪽 반지름\n      128);\n      const ringMat = new THREE.MeshBasicMaterial({\n        color: 0xd2b48c,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.5\n      });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      mesh.add(ring);\n    }\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 행성 라벨\n    if (CSS2DObject) {\n      const labelDiv = document.createElement(\"div\");\n      labelDiv.className = \"label\";\n      labelDiv.textContent = p.name;\n      labelDiv.style.color = \"white\";\n      labelDiv.style.fontSize = \"20px\";\n      labelDiv.style.fontFamily = \"Arial\";\n      labelDiv.style.pointerEvents = \"none\";\n      const label = new CSS2DObject(labelDiv);\n      label.position.set(0, p.size + 10, 0);\n      mesh.add(label);\n    }\n\n    // 궤도 생성\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = i / segments * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({\n      color: 0xffffff,\n      transparent: true,\n      opacity: 0.2\n    });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n    return {\n      ...p,\n      mesh,\n      angle: Math.random() * Math.PI * 2\n    };\n  });\n}\n\n// ----------------------\n// 행성 위치 업데이트\n// ----------------------\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n  });\n}\n\n// ----------------------\n// 은하 생성\n// ----------------------\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n  return new THREE.Points(geometry, new THREE.PointsMaterial({\n    size: 2,\n    vertexColors: true\n  }));\n}","map":{"version":3,"names":["THREE","SCALE_DISTANCE","SCALE_SIZE","SUN_SCALE","solarSystemPlanets","name","radius","size","color","speed","ring","createSun","geo","SphereGeometry","mat","MeshStandardMaterial","emissive","emissiveIntensity","metalness","roughness","mesh","Mesh","scale","set","userData","isSun","createPlanets","scene","map","p","ringScale","ringGeo","RingGeometry","ringMat","MeshBasicMaterial","side","DoubleSide","transparent","opacity","rotation","x","Math","PI","add","isPlanet","CSS2DObject","labelDiv","document","createElement","className","textContent","style","fontSize","fontFamily","pointerEvents","label","position","segments","orbitPositions","i","theta","push","cos","sin","orbitGeo","BufferGeometry","setAttribute","Float32BufferAttribute","orbitMat","LineBasicMaterial","orbitLine","LineLoop","isOrbit","angle","random","updatePlanetPositions","planets","forEach","z","generateGalaxy","numStars","geometry","positions","Float32Array","colors","Color","branch","spread","c","setRGB","r","g","b","BufferAttribute","Points","PointsMaterial","vertexColors"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/utils/solarSystem.js"],"sourcesContent":["// src/utils/solarSystem.js\nimport * as THREE from \"three\";\n\n// ----------------------\n// 스케일 상수\n// ----------------------\nconst SCALE_DISTANCE = 10; // 행성 거리 10배\nconst SCALE_SIZE = 10;     // 행성 크기 10배\nconst SUN_SCALE = 10;      // 태양 크기 10배\n\n// ----------------------\n// 태양계 행성 데이터\n// ----------------------\nexport const solarSystemPlanets = [\n  { name: \"Mercury\", radius: 60 * SCALE_DISTANCE, size: 3 * SCALE_SIZE, color: 0x888888, speed: 0.02 },\n  { name: \"Venus\",   radius: 90 * SCALE_DISTANCE, size: 6 * SCALE_SIZE, color: 0xffa500, speed: 0.015 },\n  { name: \"Earth\",   radius: 120 * SCALE_DISTANCE, size: 7 * SCALE_SIZE, color: 0x00bfff, speed: 0.01 },\n  { name: \"Mars\",    radius: 150 * SCALE_DISTANCE, size: 5 * SCALE_SIZE, color: 0xff0000, speed: 0.008 },\n  { name: \"Jupiter\", radius: 190 * SCALE_DISTANCE, size: 12 * SCALE_SIZE, color: 0x8b4513, speed: 0.005 },\n  { name: \"Saturn\",  radius: 230 * SCALE_DISTANCE, size: 10 * SCALE_SIZE, color: 0xdaa520, speed: 0.004, ring: true },\n  { name: \"Uranus\",  radius: 270 * SCALE_DISTANCE, size: 9 * SCALE_SIZE, color: 0xadd8e6, speed: 0.003 },\n  { name: \"Neptune\", radius: 310 * SCALE_DISTANCE, size: 9 * SCALE_SIZE, color: 0x00008b, speed: 0.0025 },\n];\n\n// ----------------------\n// 태양 생성\n// ----------------------\nexport function createSun() {\n  const geo = new THREE.SphereGeometry(10, 32, 32);\n  const mat = new THREE.MeshStandardMaterial({\n    color: 0xffff00,\n    emissive: 0xffff33,\n    emissiveIntensity: 1,\n    metalness: 0,\n    roughness: 0.4,\n  });\n  const mesh = new THREE.Mesh(geo, mat);\n  mesh.scale.set(SUN_SCALE, SUN_SCALE, SUN_SCALE); // 태양 스케일 적용\n  mesh.userData.isSun = true;\n  return mesh;\n}\n\n// ----------------------\n// 행성 생성\n// ----------------------\nexport function createPlanets(scene) {\n  return solarSystemPlanets.map(p => {\n    const geo = new THREE.SphereGeometry(p.size, 32, 32);\n    const mat = new THREE.MeshStandardMaterial({\n      color: p.color,\n      metalness: 0,\n      roughness: 0.4,\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 토성 고리\n    if (p.ring) {\n      const ringScale = 4; // 고리 강조용 스케일\n      const ringGeo = new THREE.RingGeometry(\n        p.size + 5 * ringScale,  // 안쪽 반지름\n        p.size + 15 * ringScale, // 바깥쪽 반지름\n        128\n      );\n      const ringMat = new THREE.MeshBasicMaterial({\n        color: 0xd2b48c,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.5,\n      });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      mesh.add(ring);\n    }\n\n\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 행성 라벨\n    if (CSS2DObject) {\n      const labelDiv = document.createElement(\"div\");\n      labelDiv.className = \"label\";\n      labelDiv.textContent = p.name;\n      labelDiv.style.color = \"white\";\n      labelDiv.style.fontSize = \"20px\";\n      labelDiv.style.fontFamily = \"Arial\";\n      labelDiv.style.pointerEvents = \"none\";\n      const label = new CSS2DObject(labelDiv);\n      label.position.set(0, p.size + 10, 0);\n      mesh.add(label);\n    }\n\n    // 궤도 생성\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = (i / segments) * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.2 });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n\n    return { ...p, mesh, angle: Math.random() * Math.PI * 2 };\n  });\n}\n\n// ----------------------\n// 행성 위치 업데이트\n// ----------------------\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n  });\n}\n\n// ----------------------\n// 은하 생성\n// ----------------------\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n  return new THREE.Points(\n    geometry,\n    new THREE.PointsMaterial({ size: 2, vertexColors: true })\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}