{"ast":null,"code":"// src/utils/solarSystem.js\nimport * as THREE from \"three\";\n\n// ----------------------\n// 스케일 상수\n// ----------------------\nconst SCALE_DISTANCE = 10; // 행성 거리 10배\nconst SCALE_SIZE = 10; // 행성 크기 10배\nconst SUN_SCALE = 10; // 태양 크기 10배\n\n// ----------------------\n// 태양계 행성 데이터\n// ----------------------\nexport const solarSystemPlanets = [{\n  name: \"Mercury\",\n  radius: 60 * SCALE_DISTANCE,\n  size: 3 * SCALE_SIZE,\n  color: 0x888888,\n  speed: 0.02\n}, {\n  name: \"Venus\",\n  radius: 90 * SCALE_DISTANCE,\n  size: 6 * SCALE_SIZE,\n  color: 0xffa500,\n  speed: 0.015\n}, {\n  name: \"Earth\",\n  radius: 120 * SCALE_DISTANCE,\n  size: 7 * SCALE_SIZE,\n  color: 0x00bfff,\n  speed: 0.01\n}, {\n  name: \"Mars\",\n  radius: 150 * SCALE_DISTANCE,\n  size: 5 * SCALE_SIZE,\n  color: 0xff5533,\n  speed: 0.008\n}, {\n  name: \"Jupiter\",\n  radius: 190 * SCALE_DISTANCE,\n  size: 12 * SCALE_SIZE,\n  color: 0xc48a3a,\n  speed: 0.005\n}, {\n  name: \"Saturn\",\n  radius: 230 * SCALE_DISTANCE,\n  size: 10 * SCALE_SIZE,\n  color: 0xdec07a,\n  speed: 0.004,\n  ring: true\n}, {\n  name: \"Uranus\",\n  radius: 270 * SCALE_DISTANCE,\n  size: 9 * SCALE_SIZE,\n  color: 0x8fd6e8,\n  speed: 0.003\n}, {\n  name: \"Neptune\",\n  radius: 310 * SCALE_DISTANCE,\n  size: 9 * SCALE_SIZE,\n  color: 0x3557ff,\n  speed: 0.0025\n}];\n\n// ----------------------\n// Canvas 기반 절차적 텍스처 유틸\n// ----------------------\nfunction createCanvasTexture(width = 1024, height = 512, draw) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  draw(ctx, width, height);\n  const texture = new THREE.CanvasTexture(canvas);\n  texture.wrapS = THREE.RepeatWrapping;\n  texture.wrapT = THREE.ClampToEdgeWrapping;\n  texture.anisotropy = 8;\n  return texture;\n}\nfunction noise(ctx, w, h, alpha = 0.1) {\n  const img = ctx.getImageData(0, 0, w, h);\n  const data = img.data;\n  for (let i = 0; i < data.length; i += 4) {\n    const n = Math.random() * 255;\n    data[i] = data[i] * (1 - alpha) + n * alpha;\n    data[i + 1] = data[i + 1] * (1 - alpha) + n * alpha;\n    data[i + 2] = data[i + 2] * (1 - alpha) + n * alpha;\n  }\n  ctx.putImageData(img, 0, 0);\n}\nfunction createPlanetTexture(name, baseHex) {\n  const base = new THREE.Color(baseHex);\n  return createCanvasTexture(1024, 512, (ctx, w, h) => {\n    ctx.fillStyle = `#${base.getHexString()}`;\n    ctx.fillRect(0, 0, w, h);\n    if (name === 'Jupiter' || name === 'Saturn') {\n      for (let y = 0; y < h; y += 12) {\n        const t = y / h;\n        const shade = 0.8 + Math.sin(t * Math.PI * 8) * 0.15;\n        const c = base.clone().multiplyScalar(shade);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 10);\n      }\n    } else if (name === 'Uranus' || name === 'Neptune') {\n      for (let y = 0; y < h; y += 18) {\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.06);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 12);\n      }\n      ctx.globalAlpha = 0.15;\n      noise(ctx, w, h, 0.2);\n      ctx.globalAlpha = 1;\n    } else if (name === 'Earth') {\n      ctx.fillStyle = '#1b4d89';\n      ctx.fillRect(0, 0, w, h);\n      ctx.fillStyle = '#2ea043';\n      for (let i = 0; i < 90; i++) {\n        const x = Math.random() * w;\n        const y = Math.random() * h;\n        const r = 8 + Math.random() * 40;\n        ctx.beginPath();\n        ctx.ellipse(x, y, r * (0.8 + Math.random() * 0.6), r, Math.random() * Math.PI, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      ctx.globalAlpha = 0.12;\n      noise(ctx, w, h, 0.4);\n      ctx.globalAlpha = 1;\n    } else if (name === 'Venus') {\n      for (let y = 0; y < h; y += 16) {\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.1);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 16);\n      }\n      ctx.globalAlpha = 0.2;\n      noise(ctx, w, h, 0.3);\n      ctx.globalAlpha = 1;\n    } else if (name === 'Mars' || name === 'Mercury') {\n      for (let i = 0; i < 2000; i++) {\n        const x = Math.random() * w;\n        const y = Math.random() * h;\n        const r = Math.random() * 3 + 1;\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.15);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      ctx.globalAlpha = 0.15;\n      noise(ctx, w, h, 0.3);\n      ctx.globalAlpha = 1;\n    }\n  });\n}\nfunction createRingTexture(inner = 0.6, outer = 1.2) {\n  const size = 1024;\n  return createCanvasTexture(size, size, (ctx, w, h) => {\n    const cx = w / 2,\n      cy = h / 2,\n      maxR = Math.min(cx, cy);\n    const grad = ctx.createRadialGradient(cx, cy, inner * maxR, cx, cy, outer * maxR);\n    grad.addColorStop(0.0, 'rgba(255,255,255,0.0)');\n    grad.addColorStop(0.3, 'rgba(255,255,255,0.35)');\n    grad.addColorStop(0.6, 'rgba(200,180,140,0.25)');\n    grad.addColorStop(1.0, 'rgba(255,255,255,0.0)');\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, w, h);\n  });\n}\n\n// ----------------------\n// 태양 생성\n// ----------------------\nexport function createSun() {\n  const geo = new THREE.SphereGeometry(10, 32, 32);\n  const mat = new THREE.MeshStandardMaterial({\n    color: 0xffff00,\n    emissive: 0xffff33,\n    emissiveIntensity: 1,\n    metalness: 0,\n    roughness: 0.4\n  });\n  const mesh = new THREE.Mesh(geo, mat);\n  mesh.scale.set(SUN_SCALE, SUN_SCALE, SUN_SCALE); // 태양 스케일 적용\n  mesh.userData.isSun = true;\n  return mesh;\n}\n\n// ----------------------\n// 행성 생성\n// ----------------------\nexport function createPlanets(scene, CSS2DObject) {\n  return solarSystemPlanets.map(p => {\n    var _rotationMap$p$name;\n    const geo = new THREE.SphereGeometry(p.size, 32, 32);\n    const texture = createPlanetTexture(p.name, p.color);\n    const mat = new THREE.MeshStandardMaterial({\n      map: texture,\n      color: 0xffffff,\n      metalness: 0.1,\n      roughness: 0.9\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 자전축 기울기\n    const tilts = {\n      Mercury: 0.01,\n      Venus: 177 * Math.PI / 180,\n      Earth: 23.5 * Math.PI / 180,\n      Mars: 25 * Math.PI / 180,\n      Jupiter: 3 * Math.PI / 180,\n      Saturn: 27 * Math.PI / 180,\n      Uranus: 98 * Math.PI / 180,\n      Neptune: 28 * Math.PI / 180\n    };\n    mesh.rotation.z = tilts[p.name] || 0;\n\n    // 토성 고리\n    if (p.ring) {\n      const inner = p.size * 1.5;\n      const outer = p.size * 2.8;\n      const ringGeo = new THREE.RingGeometry(inner, outer, 256);\n      const ringTex = createRingTexture(inner / outer * 0.9, 1.0);\n      ringTex.wrapS = THREE.RepeatWrapping;\n      ringTex.wrapT = THREE.RepeatWrapping;\n      const ringMat = new THREE.MeshBasicMaterial({\n        map: ringTex,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.9\n      });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      ring.userData.isRing = true;\n      mesh.add(ring);\n    }\n\n    // 지구 구름 레이어\n    if (p.name === 'Earth') {\n      const cloudsGeo = new THREE.SphereGeometry(p.size * 1.02, 32, 32);\n      const cloudsTex = createCanvasTexture(1024, 512, (ctx, w, h) => {\n        ctx.fillStyle = 'rgba(255,255,255,0)';\n        ctx.fillRect(0, 0, w, h);\n        ctx.fillStyle = 'rgba(255,255,255,0.65)';\n        for (let i = 0; i < 250; i++) {\n          const x = Math.random() * w;\n          const y = Math.random() * h;\n          const rw = 30 + Math.random() * 120;\n          const rh = 12 + Math.random() * 40;\n          ctx.beginPath();\n          ctx.ellipse(x, y, rw, rh, Math.random() * Math.PI, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        ctx.globalAlpha = 0.25;\n        noise(ctx, w, h, 0.2);\n        ctx.globalAlpha = 1;\n      });\n      const cloudsMat = new THREE.MeshStandardMaterial({\n        map: cloudsTex,\n        transparent: true,\n        opacity: 0.6,\n        depthWrite: false\n      });\n      const clouds = new THREE.Mesh(cloudsGeo, cloudsMat);\n      clouds.userData.isClouds = true;\n      mesh.add(clouds);\n    }\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 행성 라벨\n    if (CSS2DObject) {\n      const labelDiv = document.createElement(\"div\");\n      labelDiv.className = \"label\";\n      labelDiv.textContent = p.name;\n      labelDiv.style.color = \"white\";\n      labelDiv.style.fontSize = \"20px\";\n      labelDiv.style.fontFamily = \"Arial\";\n      labelDiv.style.pointerEvents = \"none\";\n      const label = new CSS2DObject(labelDiv);\n      label.position.set(0, p.size + 10, 0);\n      mesh.add(label);\n    }\n\n    // 궤도 생성\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = i / segments * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({\n      color: 0xffffff,\n      transparent: true,\n      opacity: 0.2\n    });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n    const baseRotation = 0.01;\n    const rotationMap = {\n      Mercury: 0.002,\n      Venus: -0.001,\n      Earth: 0.02,\n      Mars: 0.018,\n      Jupiter: 0.05,\n      Saturn: 0.04,\n      Uranus: -0.03,\n      Neptune: 0.03\n    };\n    const rotationSpeed = (_rotationMap$p$name = rotationMap[p.name]) !== null && _rotationMap$p$name !== void 0 ? _rotationMap$p$name : baseRotation;\n    return {\n      ...p,\n      mesh,\n      angle: Math.random() * Math.PI * 2,\n      rotationSpeed\n    };\n  });\n}\n\n// ----------------------\n// 행성 위치 업데이트\n// ----------------------\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n    if (p.rotationSpeed) {\n      p.mesh.rotation.y += p.rotationSpeed;\n      const clouds = p.mesh.children && p.mesh.children.find(c => c.userData && c.userData.isClouds);\n      if (clouds) clouds.rotation.y += p.rotationSpeed * 1.2;\n    }\n  });\n}\n\n// ----------------------\n// 은하 생성\n// ----------------------\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n  return new THREE.Points(geometry, new THREE.PointsMaterial({\n    size: 2,\n    vertexColors: true\n  }));\n}","map":{"version":3,"names":["THREE","SCALE_DISTANCE","SCALE_SIZE","SUN_SCALE","solarSystemPlanets","name","radius","size","color","speed","ring","createCanvasTexture","width","height","draw","canvas","document","createElement","ctx","getContext","texture","CanvasTexture","wrapS","RepeatWrapping","wrapT","ClampToEdgeWrapping","anisotropy","noise","w","h","alpha","img","getImageData","data","i","length","n","Math","random","putImageData","createPlanetTexture","baseHex","base","Color","fillStyle","getHexString","fillRect","y","t","shade","sin","PI","c","clone","multiplyScalar","offsetHSL","globalAlpha","x","r","beginPath","ellipse","fill","arc","createRingTexture","inner","outer","cx","cy","maxR","min","grad","createRadialGradient","addColorStop","createSun","geo","SphereGeometry","mat","MeshStandardMaterial","emissive","emissiveIntensity","metalness","roughness","mesh","Mesh","scale","set","userData","isSun","createPlanets","scene","CSS2DObject","map","p","_rotationMap$p$name","tilts","Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune","rotation","z","ringGeo","RingGeometry","ringTex","ringMat","MeshBasicMaterial","side","DoubleSide","transparent","opacity","isRing","add","cloudsGeo","cloudsTex","rw","rh","cloudsMat","depthWrite","clouds","isClouds","isPlanet","labelDiv","className","textContent","style","fontSize","fontFamily","pointerEvents","label","position","segments","orbitPositions","theta","push","cos","orbitGeo","BufferGeometry","setAttribute","Float32BufferAttribute","orbitMat","LineBasicMaterial","orbitLine","LineLoop","isOrbit","baseRotation","rotationMap","rotationSpeed","angle","updatePlanetPositions","planets","forEach","children","find","generateGalaxy","numStars","geometry","positions","Float32Array","colors","branch","spread","setRGB","g","b","BufferAttribute","Points","PointsMaterial","vertexColors"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/utils/solarSystem.js"],"sourcesContent":["// src/utils/solarSystem.js\nimport * as THREE from \"three\";\n\n// ----------------------\n// 스케일 상수\n// ----------------------\nconst SCALE_DISTANCE = 10; // 행성 거리 10배\nconst SCALE_SIZE = 10;     // 행성 크기 10배\nconst SUN_SCALE = 10;      // 태양 크기 10배\n\n// ----------------------\n// 태양계 행성 데이터\n// ----------------------\nexport const solarSystemPlanets = [\n  { name: \"Mercury\", radius: 60 * SCALE_DISTANCE, size: 3 * SCALE_SIZE, color: 0x888888, speed: 0.02 },\n  { name: \"Venus\",   radius: 90 * SCALE_DISTANCE, size: 6 * SCALE_SIZE, color: 0xffa500, speed: 0.015 },\n  { name: \"Earth\",   radius: 120 * SCALE_DISTANCE, size: 7 * SCALE_SIZE, color: 0x00bfff, speed: 0.01 },\n  { name: \"Mars\",    radius: 150 * SCALE_DISTANCE, size: 5 * SCALE_SIZE, color: 0xff5533, speed: 0.008 },\n  { name: \"Jupiter\", radius: 190 * SCALE_DISTANCE, size: 12 * SCALE_SIZE, color: 0xc48a3a, speed: 0.005 },\n  { name: \"Saturn\",  radius: 230 * SCALE_DISTANCE, size: 10 * SCALE_SIZE, color: 0xdec07a, speed: 0.004, ring: true },\n  { name: \"Uranus\",  radius: 270 * SCALE_DISTANCE, size: 9 * SCALE_SIZE, color: 0x8fd6e8, speed: 0.003 },\n  { name: \"Neptune\", radius: 310 * SCALE_DISTANCE, size: 9 * SCALE_SIZE, color: 0x3557ff, speed: 0.0025 },\n];\n\n// ----------------------\n// Canvas 기반 절차적 텍스처 유틸\n// ----------------------\nfunction createCanvasTexture(width = 1024, height = 512, draw) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  draw(ctx, width, height);\n  const texture = new THREE.CanvasTexture(canvas);\n  texture.wrapS = THREE.RepeatWrapping;\n  texture.wrapT = THREE.ClampToEdgeWrapping;\n  texture.anisotropy = 8;\n  return texture;\n}\n\nfunction noise(ctx, w, h, alpha = 0.1) {\n  const img = ctx.getImageData(0, 0, w, h);\n  const data = img.data;\n  for (let i = 0; i < data.length; i += 4) {\n    const n = Math.random() * 255;\n    data[i] = (data[i] * (1 - alpha)) + n * alpha;\n    data[i + 1] = (data[i + 1] * (1 - alpha)) + n * alpha;\n    data[i + 2] = (data[i + 2] * (1 - alpha)) + n * alpha;\n  }\n  ctx.putImageData(img, 0, 0);\n}\n\nfunction createPlanetTexture(name, baseHex) {\n  const base = new THREE.Color(baseHex);\n  return createCanvasTexture(1024, 512, (ctx, w, h) => {\n    ctx.fillStyle = `#${base.getHexString()}`;\n    ctx.fillRect(0, 0, w, h);\n\n    if (name === 'Jupiter' || name === 'Saturn') {\n      for (let y = 0; y < h; y += 12) {\n        const t = y / h;\n        const shade = 0.8 + Math.sin(t * Math.PI * 8) * 0.15;\n        const c = base.clone().multiplyScalar(shade);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 10);\n      }\n    } else if (name === 'Uranus' || name === 'Neptune') {\n      for (let y = 0; y < h; y += 18) {\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.06);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 12);\n      }\n      ctx.globalAlpha = 0.15; noise(ctx, w, h, 0.2); ctx.globalAlpha = 1;\n    } else if (name === 'Earth') {\n      ctx.fillStyle = '#1b4d89';\n      ctx.fillRect(0, 0, w, h);\n      ctx.fillStyle = '#2ea043';\n      for (let i = 0; i < 90; i++) {\n        const x = Math.random() * w;\n        const y = Math.random() * h;\n        const r = 8 + Math.random() * 40;\n        ctx.beginPath();\n        ctx.ellipse(x, y, r * (0.8 + Math.random()*0.6), r, Math.random()*Math.PI, 0, Math.PI*2);\n        ctx.fill();\n      }\n      ctx.globalAlpha = 0.12; noise(ctx, w, h, 0.4); ctx.globalAlpha = 1;\n    } else if (name === 'Venus') {\n      for (let y = 0; y < h; y += 16) {\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.1);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 16);\n      }\n      ctx.globalAlpha = 0.2; noise(ctx, w, h, 0.3); ctx.globalAlpha = 1;\n    } else if (name === 'Mars' || name === 'Mercury') {\n      for (let i = 0; i < 2000; i++) {\n        const x = Math.random() * w;\n        const y = Math.random() * h;\n        const r = Math.random() * 3 + 1;\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.15);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      ctx.globalAlpha = 0.15; noise(ctx, w, h, 0.3); ctx.globalAlpha = 1;\n    }\n  });\n}\n\nfunction createRingTexture(inner = 0.6, outer = 1.2) {\n  const size = 1024;\n  return createCanvasTexture(size, size, (ctx, w, h) => {\n    const cx = w / 2, cy = h / 2, maxR = Math.min(cx, cy);\n    const grad = ctx.createRadialGradient(cx, cy, inner * maxR, cx, cy, outer * maxR);\n    grad.addColorStop(0.0, 'rgba(255,255,255,0.0)');\n    grad.addColorStop(0.3, 'rgba(255,255,255,0.35)');\n    grad.addColorStop(0.6, 'rgba(200,180,140,0.25)');\n    grad.addColorStop(1.0, 'rgba(255,255,255,0.0)');\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, w, h);\n  });\n}\n\n// ----------------------\n// 태양 생성\n// ----------------------\nexport function createSun() {\n  const geo = new THREE.SphereGeometry(10, 32, 32);\n  const mat = new THREE.MeshStandardMaterial({\n    color: 0xffff00,\n    emissive: 0xffff33,\n    emissiveIntensity: 1,\n    metalness: 0,\n    roughness: 0.4,\n  });\n  const mesh = new THREE.Mesh(geo, mat);\n  mesh.scale.set(SUN_SCALE, SUN_SCALE, SUN_SCALE); // 태양 스케일 적용\n  mesh.userData.isSun = true;\n  return mesh;\n}\n\n// ----------------------\n// 행성 생성\n// ----------------------\nexport function createPlanets(scene, CSS2DObject) {\n  return solarSystemPlanets.map(p => {\n    const geo = new THREE.SphereGeometry(p.size, 32, 32);\n    const texture = createPlanetTexture(p.name, p.color);\n    const mat = new THREE.MeshStandardMaterial({\n      map: texture,\n      color: 0xffffff,\n      metalness: 0.1,\n      roughness: 0.9,\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 자전축 기울기\n    const tilts = { Mercury: 0.01, Venus: 177 * Math.PI/180, Earth: 23.5 * Math.PI/180, Mars: 25 * Math.PI/180, Jupiter: 3 * Math.PI/180, Saturn: 27 * Math.PI/180, Uranus: 98 * Math.PI/180, Neptune: 28 * Math.PI/180 };\n    mesh.rotation.z = tilts[p.name] || 0;\n\n    // 토성 고리\n    if (p.ring) {\n      const inner = p.size * 1.5;\n      const outer = p.size * 2.8;\n      const ringGeo = new THREE.RingGeometry(inner, outer, 256);\n      const ringTex = createRingTexture(inner/outer * 0.9, 1.0);\n      ringTex.wrapS = THREE.RepeatWrapping;\n      ringTex.wrapT = THREE.RepeatWrapping;\n      const ringMat = new THREE.MeshBasicMaterial({ map: ringTex, side: THREE.DoubleSide, transparent: true, opacity: 0.9 });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      ring.userData.isRing = true;\n      mesh.add(ring);\n    }\n\n    // 지구 구름 레이어\n    if (p.name === 'Earth') {\n      const cloudsGeo = new THREE.SphereGeometry(p.size * 1.02, 32, 32);\n      const cloudsTex = createCanvasTexture(1024, 512, (ctx, w, h) => {\n        ctx.fillStyle = 'rgba(255,255,255,0)';\n        ctx.fillRect(0, 0, w, h);\n        ctx.fillStyle = 'rgba(255,255,255,0.65)';\n        for (let i = 0; i < 250; i++) {\n          const x = Math.random() * w;\n          const y = Math.random() * h;\n          const rw = 30 + Math.random() * 120;\n          const rh = 12 + Math.random() * 40;\n          ctx.beginPath();\n          ctx.ellipse(x, y, rw, rh, Math.random() * Math.PI, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        ctx.globalAlpha = 0.25; noise(ctx, w, h, 0.2); ctx.globalAlpha = 1;\n      });\n      const cloudsMat = new THREE.MeshStandardMaterial({ map: cloudsTex, transparent: true, opacity: 0.6, depthWrite: false });\n      const clouds = new THREE.Mesh(cloudsGeo, cloudsMat);\n      clouds.userData.isClouds = true;\n      mesh.add(clouds);\n    }\n\n\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 행성 라벨\n    if (CSS2DObject) {\n      const labelDiv = document.createElement(\"div\");\n      labelDiv.className = \"label\";\n      labelDiv.textContent = p.name;\n      labelDiv.style.color = \"white\";\n      labelDiv.style.fontSize = \"20px\";\n      labelDiv.style.fontFamily = \"Arial\";\n      labelDiv.style.pointerEvents = \"none\";\n      const label = new CSS2DObject(labelDiv);\n      label.position.set(0, p.size + 10, 0);\n      mesh.add(label);\n    }\n\n    // 궤도 생성\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = (i / segments) * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.2 });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n\n    const baseRotation = 0.01;\n    const rotationMap = { Mercury: 0.002, Venus: -0.001, Earth: 0.02, Mars: 0.018, Jupiter: 0.05, Saturn: 0.04, Uranus: -0.03, Neptune: 0.03 };\n    const rotationSpeed = rotationMap[p.name] ?? baseRotation;\n    return { ...p, mesh, angle: Math.random() * Math.PI * 2, rotationSpeed };\n  });\n}\n\n// ----------------------\n// 행성 위치 업데이트\n// ----------------------\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n    if (p.rotationSpeed) {\n      p.mesh.rotation.y += p.rotationSpeed;\n      const clouds = p.mesh.children && p.mesh.children.find(c => c.userData && c.userData.isClouds);\n      if (clouds) clouds.rotation.y += p.rotationSpeed * 1.2;\n    }\n  });\n}\n\n// ----------------------\n// 은하 생성\n// ----------------------\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n  return new THREE.Points(\n    geometry,\n    new THREE.PointsMaterial({ size: 2, vertexColors: true })\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}