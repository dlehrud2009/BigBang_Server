{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer, CSS2DObject } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ParticleCanvas() {\n  _s();\n  const mountRef = useRef();\n  const [userid, setUserid] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n\n  // --- 서버에 사용자 생성 ---\n  const startSimulation = async () => {\n    try {\n      const res = await axios.post(\"http://localhost:4000/api/user\", {\n        username: \"Guest\"\n      });\n      setUserid(res.data.userid);\n      setStage(res.data.stage);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // --- 단계 변경 버튼 클릭 시 ---\n  const changeStage = async newStage => {\n    if (!userid) return;\n    const order = [\"bigbang\", \"galaxy\", \"solar_system\"];\n    const currentIndex = order.indexOf(stage);\n    let endpoint = \"\";\n    if (newStage === \"bigbang\" && currentIndex !== 0) endpoint = `/api/simulation/prev/${userid}`;\n    if (newStage === \"galaxy\" && currentIndex !== 1) {\n      endpoint = currentIndex < 1 ? `/api/simulation/next/${userid}` : `/api/simulation/prev/${userid}`;\n    }\n    if (newStage === \"solar_system\" && currentIndex !== 2) endpoint = `/api/simulation/next/${userid}`;\n    if (!endpoint) return; // 이미 현재 단계이면 아무 것도 안함\n\n    try {\n      const res = await axios.post(`http://localhost:4000${endpoint}`);\n      setStage(res.data.stage);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // --- Three.js 초기화 및 애니메이션 ---\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.PerspectiveCamera(60, width / height, 1, 50000);\n    camera.position.set(0, 2500, 10000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n    let stageObject = null;\n    let sun = null;\n    let planets = [];\n    const setupStage = () => {\n      scene.children.filter(obj => obj.userData.isStageObject).forEach(obj => scene.remove(obj));\n      stageObject = null;\n      sun = null;\n      planets = [];\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n        planets = createPlanets(scene, CSS2DObject);\n        planets.forEach(p => {\n          p.mesh.userData.isStageObject = true;\n        });\n        camera.position.set(0, 500, 2500);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n      if (stage === \"bigbang\") {\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 800000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 3000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.random() * Math.PI;\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        stageObject = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true\n        }));\n        stageObject.userData.isStageObject = true;\n        scene.add(stageObject);\n        camera.position.set(0, 0, 1000);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n      if (stage === \"galaxy\") {\n        const group = new THREE.Group();\n        const numParticles = 400000;\n        const geometry = new THREE.BufferGeometry();\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 5000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.acos(Math.random() * 2 - 1);\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta) * 0.3;\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const palette = [0x88ccff, 0xaa88ff, 0xff88cc, 0xffffff];\n          color.setHex(palette[Math.floor(Math.random() * palette.length)]);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        const stars = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true,\n          blending: THREE.AdditiveBlending,\n          transparent: true,\n          opacity: 0.9\n        }));\n        group.add(stars);\n        const core = new THREE.Mesh(new THREE.SphereGeometry(50, 32, 32), new THREE.MeshBasicMaterial({\n          color: 0xffffff,\n          transparent: true,\n          opacity: 0.9\n        }));\n        group.add(core);\n        group.userData.isStageObject = true;\n        stageObject = group;\n        scene.add(stageObject);\n        camera.position.set(0, 200, 1500);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n    };\n    setupStage();\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach(p => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy\") && stageObject) {\n        stageObject.rotation.y += 0.0005;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [!userid && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startSimulation,\n      children: \"Start Simulation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), userid && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 100,\n        display: \"flex\",\n        gap: \"8px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => changeStage(\"bigbang\"),\n        children: \"BigBang\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => changeStage(\"galaxy\"),\n        children: \"Galaxy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => changeStage(\"solar_system\"),\n        children: \"SolarSystem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n}\n_s(ParticleCanvas, \"nM+Rea8B5dz9thJEo3N+3nigks8=\");\n_c = ParticleCanvas;\nvar _c;\n$RefreshReg$(_c, \"ParticleCanvas\");","map":{"version":3,"names":["useRef","useEffect","useState","THREE","OrbitControls","CSS2DRenderer","CSS2DObject","createSun","createPlanets","axios","jsxDEV","_jsxDEV","ParticleCanvas","_s","mountRef","userid","setUserid","stage","setStage","startSimulation","res","post","username","data","err","console","error","changeStage","newStage","order","currentIndex","indexOf","endpoint","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","labelRenderer","style","top","controls","enableDamping","enablePan","ambientLight","AmbientLight","add","stageObject","sun","planets","setupStage","children","filter","obj","userData","isStageObject","forEach","remove","p","mesh","target","update","geometry","BufferGeometry","numParticles","positions","Float32Array","colors","color","i","r","Math","random","theta","PI","phi","sin","cos","c","setRGB","g","b","setAttribute","BufferAttribute","Points","PointsMaterial","size","vertexColors","group","Group","acos","palette","setHex","floor","length","stars","blending","AdditiveBlending","transparent","opacity","core","Mesh","SphereGeometry","MeshBasicMaterial","frameId","animate","rotation","y","angle","speed","x","radius","z","render","requestAnimationFrame","cancelAnimationFrame","dispose","removeChild","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","left","zIndex","display","gap","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx"],"sourcesContent":["// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer, CSS2DObject } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\nimport axios from \"axios\";\n\nexport default function ParticleCanvas() {\n  const mountRef = useRef();\n  const [userid, setUserid] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n\n  // --- 서버에 사용자 생성 ---\n  const startSimulation = async () => {\n    try {\n      const res = await axios.post(\"http://localhost:4000/api/user\", { username: \"Guest\" });\n      setUserid(res.data.userid);\n      setStage(res.data.stage);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // --- 단계 변경 버튼 클릭 시 ---\n  const changeStage = async (newStage) => {\n    if (!userid) return;\n\n    const order = [\"bigbang\", \"galaxy\", \"solar_system\"];\n    const currentIndex = order.indexOf(stage);\n    let endpoint = \"\";\n\n    if (newStage === \"bigbang\" && currentIndex !== 0) endpoint = `/api/simulation/prev/${userid}`;\n    if (newStage === \"galaxy\" && currentIndex !== 1) {\n      endpoint = currentIndex < 1 ? `/api/simulation/next/${userid}` : `/api/simulation/prev/${userid}`;\n    }\n    if (newStage === \"solar_system\" && currentIndex !== 2) endpoint = `/api/simulation/next/${userid}`;\n\n    if (!endpoint) return; // 이미 현재 단계이면 아무 것도 안함\n\n    try {\n      const res = await axios.post(`http://localhost:4000${endpoint}`);\n      setStage(res.data.stage);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // --- Three.js 초기화 및 애니메이션 ---\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.PerspectiveCamera(60, width / height, 1, 50000);\n    camera.position.set(0, 2500, 10000);\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n\n    let stageObject = null;\n    let sun = null;\n    let planets = [];\n\n    const setupStage = () => {\n      scene.children.filter(obj => obj.userData.isStageObject).forEach(obj => scene.remove(obj));\n      stageObject = null;\n      sun = null;\n      planets = [];\n\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n\n        planets = createPlanets(scene, CSS2DObject);\n        planets.forEach(p => { p.mesh.userData.isStageObject = true; });\n\n        camera.position.set(0, 500, 2500);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n\n      if (stage === \"bigbang\") {\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 800000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 3000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.random() * Math.PI;\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        stageObject = new THREE.Points(\n          geometry,\n          new THREE.PointsMaterial({ size: 2, vertexColors: true })\n        );\n        stageObject.userData.isStageObject = true;\n        scene.add(stageObject);\n\n        camera.position.set(0, 0, 1000);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n\n      if (stage === \"galaxy\") {\n        const group = new THREE.Group();\n        const numParticles = 400000;\n        const geometry = new THREE.BufferGeometry();\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 5000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.acos(Math.random() * 2 - 1);\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta) * 0.3;\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const palette = [0x88ccff, 0xaa88ff, 0xff88cc, 0xffffff];\n          color.setHex(palette[Math.floor(Math.random() * palette.length)]);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        const stars = new THREE.Points(\n          geometry,\n          new THREE.PointsMaterial({\n            size: 2,\n            vertexColors: true,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            opacity: 0.9,\n          })\n        );\n        group.add(stars);\n\n        const core = new THREE.Mesh(\n          new THREE.SphereGeometry(50, 32, 32),\n          new THREE.MeshBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.9 })\n        );\n        group.add(core);\n\n        group.userData.isStageObject = true;\n        stageObject = group;\n        scene.add(stageObject);\n\n        camera.position.set(0, 200, 1500);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n    };\n\n    setupStage();\n\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach(p => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy\") && stageObject) {\n        stageObject.rotation.y += 0.0005;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"600px\" }}>\n      {!userid && <button onClick={startSimulation}>Start Simulation</button>}\n      <div ref={mountRef} style={{ width: \"100%\", height: \"100%\" }} />\n\n      {userid && (\n        <div style={{ position: \"absolute\", top: 10, left: 10, zIndex: 100, display: \"flex\", gap: \"8px\" }}>\n          <button onClick={() => changeStage(\"bigbang\")}>BigBang</button>\n          <button onClick={() => changeStage(\"galaxy\")}>Galaxy</button>\n          <button onClick={() => changeStage(\"solar_system\")}>SolarSystem</button>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}