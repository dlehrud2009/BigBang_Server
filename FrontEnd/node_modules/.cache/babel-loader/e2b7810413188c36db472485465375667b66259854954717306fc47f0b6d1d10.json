{"ast":null,"code":"import _objectSpread from\"/Users/cellia/Desktop/bigbang/FrontEnd/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/utils/solarSystem.js\nimport*as THREE from\"three\";// ----------------------\n// 스케일 상수\n// ----------------------\nconst SCALE_DISTANCE=10;// 행성 거리 10배\nconst SCALE_SIZE=10;// 행성 크기 10배\nconst SUN_SCALE=10;// 태양 크기 10배\n// ----------------------\n// 태양계 행성 데이터\n// ----------------------\nexport const solarSystemPlanets=[{name:\"Mercury\",radius:60*SCALE_DISTANCE,size:3*SCALE_SIZE,color:0x888888,speed:0.02},{name:\"Venus\",radius:90*SCALE_DISTANCE,size:6*SCALE_SIZE,color:0xffa500,speed:0.015},{name:\"Earth\",radius:120*SCALE_DISTANCE,size:7*SCALE_SIZE,color:0x00bfff,speed:0.01},{name:\"Mars\",radius:150*SCALE_DISTANCE,size:5*SCALE_SIZE,color:0xff0000,speed:0.008},{name:\"Jupiter\",radius:190*SCALE_DISTANCE,size:12*SCALE_SIZE,color:0x8b4513,speed:0.005},{name:\"Saturn\",radius:230*SCALE_DISTANCE,size:10*SCALE_SIZE,color:0xdaa520,speed:0.004,ring:true},{name:\"Uranus\",radius:270*SCALE_DISTANCE,size:9*SCALE_SIZE,color:0xadd8e6,speed:0.003},{name:\"Neptune\",radius:310*SCALE_DISTANCE,size:9*SCALE_SIZE,color:0x00008b,speed:0.0025}];// ----------------------\n// 태양 생성\n// ----------------------\nexport function createSun(){const geo=new THREE.SphereGeometry(10,32,32);const mat=new THREE.MeshStandardMaterial({color:0xffff00,emissive:0xffff33,emissiveIntensity:1,metalness:0,roughness:0.4});const mesh=new THREE.Mesh(geo,mat);mesh.scale.set(SUN_SCALE,SUN_SCALE,SUN_SCALE);// 태양 스케일 적용\nmesh.userData.isSun=true;return mesh;}// ----------------------\n// 행성 생성\n// ----------------------\nexport function createPlanets(scene,CSS2DObject){return solarSystemPlanets.map(p=>{const geo=new THREE.SphereGeometry(p.size,32,32);const mat=new THREE.MeshStandardMaterial({color:p.color,metalness:0,roughness:0.4});const mesh=new THREE.Mesh(geo,mat);// 토성 고리\nif(p.ring){const ringScale=4;// 고리 강조용 스케일\nconst ringGeo=new THREE.RingGeometry(p.size+5*ringScale,// 안쪽 반지름\np.size+15*ringScale,// 바깥쪽 반지름\n128);const ringMat=new THREE.MeshBasicMaterial({color:0xd2b48c,side:THREE.DoubleSide,transparent:true,opacity:0.5});const ring=new THREE.Mesh(ringGeo,ringMat);ring.rotation.x=-Math.PI/2;mesh.add(ring);}mesh.userData.isPlanet=true;scene.add(mesh);// 행성 라벨\nif(CSS2DObject){const labelDiv=document.createElement(\"div\");labelDiv.className=\"label\";labelDiv.textContent=p.name;labelDiv.style.color=\"white\";labelDiv.style.fontSize=\"20px\";labelDiv.style.fontFamily=\"Arial\";labelDiv.style.pointerEvents=\"none\";const label=new CSS2DObject(labelDiv);label.position.set(0,p.size+10,0);mesh.add(label);}// 궤도 생성\nconst segments=128;const orbitPositions=[];for(let i=0;i<=segments;i++){const theta=i/segments*2*Math.PI;orbitPositions.push(p.radius*Math.cos(theta),0,p.radius*Math.sin(theta));}const orbitGeo=new THREE.BufferGeometry();orbitGeo.setAttribute(\"position\",new THREE.Float32BufferAttribute(orbitPositions,3));const orbitMat=new THREE.LineBasicMaterial({color:0xffffff,transparent:true,opacity:0.2});const orbitLine=new THREE.LineLoop(orbitGeo,orbitMat);orbitLine.userData.isOrbit=true;scene.add(orbitLine);return _objectSpread(_objectSpread({},p),{},{mesh,angle:Math.random()*Math.PI*2});});}// ----------------------\n// 행성 위치 업데이트\n// ----------------------\nexport function updatePlanetPositions(planets){planets.forEach(p=>{p.angle+=p.speed;p.mesh.position.x=p.radius*Math.cos(p.angle);p.mesh.position.z=p.radius*Math.sin(p.angle);});}// ----------------------\n// 은하 생성\n// ----------------------\nexport function generateGalaxy(){let numStars=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5000;const geometry=new THREE.BufferGeometry();const positions=new Float32Array(numStars*3);const colors=new Float32Array(numStars*3);const color=new THREE.Color();for(let i=0;i<numStars;i++){const branch=i%4;const radius=Math.random()*400;const angle=radius*0.1+branch*Math.PI/2;const spread=(Math.random()-0.5)*15;positions[i*3]=radius*Math.cos(angle)+spread;positions[i*3+1]=(Math.random()-0.5)*50;positions[i*3+2]=radius*Math.sin(angle)+spread;const c=Math.random()*0.8+0.2;color.setRGB(c,c,c);colors[i*3]=color.r;colors[i*3+1]=color.g;colors[i*3+2]=color.b;}geometry.setAttribute(\"position\",new THREE.BufferAttribute(positions,3));geometry.setAttribute(\"color\",new THREE.BufferAttribute(colors,3));return new THREE.Points(geometry,new THREE.PointsMaterial({size:2,vertexColors:true}));}","map":{"version":3,"names":["THREE","SCALE_DISTANCE","SCALE_SIZE","SUN_SCALE","solarSystemPlanets","name","radius","size","color","speed","ring","createSun","geo","SphereGeometry","mat","MeshStandardMaterial","emissive","emissiveIntensity","metalness","roughness","mesh","Mesh","scale","set","userData","isSun","createPlanets","scene","CSS2DObject","map","p","ringScale","ringGeo","RingGeometry","ringMat","MeshBasicMaterial","side","DoubleSide","transparent","opacity","rotation","x","Math","PI","add","isPlanet","labelDiv","document","createElement","className","textContent","style","fontSize","fontFamily","pointerEvents","label","position","segments","orbitPositions","i","theta","push","cos","sin","orbitGeo","BufferGeometry","setAttribute","Float32BufferAttribute","orbitMat","LineBasicMaterial","orbitLine","LineLoop","isOrbit","_objectSpread","angle","random","updatePlanetPositions","planets","forEach","z","generateGalaxy","numStars","arguments","length","undefined","geometry","positions","Float32Array","colors","Color","branch","spread","c","setRGB","r","g","b","BufferAttribute","Points","PointsMaterial","vertexColors"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/utils/solarSystem.js"],"sourcesContent":["// src/utils/solarSystem.js\nimport * as THREE from \"three\";\n\n// ----------------------\n// 스케일 상수\n// ----------------------\nconst SCALE_DISTANCE = 10; // 행성 거리 10배\nconst SCALE_SIZE = 10;     // 행성 크기 10배\nconst SUN_SCALE = 10;      // 태양 크기 10배\n\n// ----------------------\n// 태양계 행성 데이터\n// ----------------------\nexport const solarSystemPlanets = [\n  { name: \"Mercury\", radius: 60 * SCALE_DISTANCE, size: 3 * SCALE_SIZE, color: 0x888888, speed: 0.02 },\n  { name: \"Venus\",   radius: 90 * SCALE_DISTANCE, size: 6 * SCALE_SIZE, color: 0xffa500, speed: 0.015 },\n  { name: \"Earth\",   radius: 120 * SCALE_DISTANCE, size: 7 * SCALE_SIZE, color: 0x00bfff, speed: 0.01 },\n  { name: \"Mars\",    radius: 150 * SCALE_DISTANCE, size: 5 * SCALE_SIZE, color: 0xff0000, speed: 0.008 },\n  { name: \"Jupiter\", radius: 190 * SCALE_DISTANCE, size: 12 * SCALE_SIZE, color: 0x8b4513, speed: 0.005 },\n  { name: \"Saturn\",  radius: 230 * SCALE_DISTANCE, size: 10 * SCALE_SIZE, color: 0xdaa520, speed: 0.004, ring: true },\n  { name: \"Uranus\",  radius: 270 * SCALE_DISTANCE, size: 9 * SCALE_SIZE, color: 0xadd8e6, speed: 0.003 },\n  { name: \"Neptune\", radius: 310 * SCALE_DISTANCE, size: 9 * SCALE_SIZE, color: 0x00008b, speed: 0.0025 },\n];\n\n// ----------------------\n// 태양 생성\n// ----------------------\nexport function createSun() {\n  const geo = new THREE.SphereGeometry(10, 32, 32);\n  const mat = new THREE.MeshStandardMaterial({\n    color: 0xffff00,\n    emissive: 0xffff33,\n    emissiveIntensity: 1,\n    metalness: 0,\n    roughness: 0.4,\n  });\n  const mesh = new THREE.Mesh(geo, mat);\n  mesh.scale.set(SUN_SCALE, SUN_SCALE, SUN_SCALE); // 태양 스케일 적용\n  mesh.userData.isSun = true;\n  return mesh;\n}\n\n// ----------------------\n// 행성 생성\n// ----------------------\nexport function createPlanets(scene, CSS2DObject) {\n  return solarSystemPlanets.map(p => {\n    const geo = new THREE.SphereGeometry(p.size, 32, 32);\n    const mat = new THREE.MeshStandardMaterial({\n      color: p.color,\n      metalness: 0,\n      roughness: 0.4,\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 토성 고리\n    if (p.ring) {\n      const ringScale = 4; // 고리 강조용 스케일\n      const ringGeo = new THREE.RingGeometry(\n        p.size + 5 * ringScale,  // 안쪽 반지름\n        p.size + 15 * ringScale, // 바깥쪽 반지름\n        128\n      );\n      const ringMat = new THREE.MeshBasicMaterial({\n        color: 0xd2b48c,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.5,\n      });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      mesh.add(ring);\n    }\n\n\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 행성 라벨\n    if (CSS2DObject) {\n      const labelDiv = document.createElement(\"div\");\n      labelDiv.className = \"label\";\n      labelDiv.textContent = p.name;\n      labelDiv.style.color = \"white\";\n      labelDiv.style.fontSize = \"20px\";\n      labelDiv.style.fontFamily = \"Arial\";\n      labelDiv.style.pointerEvents = \"none\";\n      const label = new CSS2DObject(labelDiv);\n      label.position.set(0, p.size + 10, 0);\n      mesh.add(label);\n    }\n\n    // 궤도 생성\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = (i / segments) * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.2 });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n\n    return { ...p, mesh, angle: Math.random() * Math.PI * 2 };\n  });\n}\n\n// ----------------------\n// 행성 위치 업데이트\n// ----------------------\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n  });\n}\n\n// ----------------------\n// 은하 생성\n// ----------------------\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n  return new THREE.Points(\n    geometry,\n    new THREE.PointsMaterial({ size: 2, vertexColors: true })\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}