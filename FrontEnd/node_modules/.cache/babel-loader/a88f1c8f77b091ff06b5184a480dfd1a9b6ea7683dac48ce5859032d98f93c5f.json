{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ParticleCanvas({\n  stage,\n  setStage\n}) {\n  _s();\n  const mountRef = useRef();\n  const handleStageChange = newStage => setStage(newStage);\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 10000);\n    camera.position.z = 1200;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n    const pointLight = new THREE.PointLight(0xffffff, 3, 5000);\n    pointLight.position.set(0, 0, 0);\n    scene.add(pointLight);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n    let points = null;\n    let sun = null;\n    let planets = [];\n    const setupStage = () => {\n      // 이전 stage 제거\n      scene.children.filter(obj => obj.userData.isStageObject).forEach(obj => scene.remove(obj));\n      points = null;\n      sun = null;\n      planets = [];\n\n      // === BigBang 구체형 ===\n      if (stage === \"bigbang\") {\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 200000; // 입자 수\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        const radius = 600; // 구체 반지름\n\n        for (let i = 0; i < numParticles; i++) {\n          // 구 내부 랜덤 좌표\n          const u = Math.random();\n          const v = Math.random();\n          const theta = u * 2.0 * Math.PI;\n          const phi = Math.acos(2.0 * v - 1.0);\n          const r = radius * Math.cbrt(Math.random());\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        points = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true\n        }));\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n\n      // === Galaxy 나선형 ===\n      if (stage === \"galaxy_formation\") {\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 200000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        const numArms = 4; // 나선 팔 개수\n        const galaxyRadius = 6000;\n        for (let i = 0; i < numParticles; i++) {\n          const arm = i % numArms;\n          const radius = Math.random() * galaxyRadius;\n          const angle = radius * 0.3 + arm * 2 * Math.PI / numArms;\n          const spin = (Math.random() - 0.5) * 0.5;\n          positions[i * 3] = radius * Math.cos(angle + spin);\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 200; // 두께\n          positions[i * 3 + 2] = radius * Math.sin(angle + spin);\n          const c = Math.random() * 0.8 + 0.2;\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        points = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true\n        }));\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n\n      // === Solar System ===\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n        planets = createPlanets(scene);\n        planets.forEach(p => {\n          p.mesh.userData.isStageObject = true;\n        });\n      }\n    };\n    setupStage();\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach(p => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy_formation\") && points) {\n        points.rotation.y += 0.0005;\n        points.rotation.z += 0.0005;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 100,\n        display: \"flex\",\n        gap: \"8px\",\n        pointerEvents: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"bigbang\"),\n        children: \"BigBang\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"galaxy_formation\"),\n        children: \"Galaxy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"solar_system\"),\n        children: \"SolarSystem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s(ParticleCanvas, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ParticleCanvas;\nvar _c;\n$RefreshReg$(_c, \"ParticleCanvas\");","map":{"version":3,"names":["useRef","useEffect","THREE","OrbitControls","CSS2DRenderer","createSun","createPlanets","jsxDEV","_jsxDEV","ParticleCanvas","stage","setStage","_s","mountRef","handleStageChange","newStage","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","labelRenderer","style","top","controls","enableDamping","enablePan","pointLight","PointLight","set","add","ambientLight","AmbientLight","points","sun","planets","setupStage","children","filter","obj","userData","isStageObject","forEach","remove","geometry","BufferGeometry","numParticles","positions","Float32Array","colors","color","radius","i","u","Math","random","v","theta","PI","phi","acos","r","cbrt","sin","cos","c","setRGB","g","b","setAttribute","BufferAttribute","Points","PointsMaterial","size","vertexColors","numArms","galaxyRadius","arm","angle","spin","p","mesh","frameId","animate","rotation","y","speed","x","update","render","requestAnimationFrame","cancelAnimationFrame","dispose","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","left","zIndex","display","gap","pointerEvents","onClick","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx"],"sourcesContent":["// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\n\nexport default function ParticleCanvas({ stage, setStage }) {\n  const mountRef = useRef();\n\n  const handleStageChange = (newStage) => setStage(newStage);\n\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 10000);\n    camera.position.z = 1200;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n\n    const pointLight = new THREE.PointLight(0xffffff, 3, 5000);\n    pointLight.position.set(0, 0, 0);\n    scene.add(pointLight);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n\n    let points = null;\n    let sun = null;\n    let planets = [];\n\n    const setupStage = () => {\n      // 이전 stage 제거\n      scene.children\n        .filter(obj => obj.userData.isStageObject)\n        .forEach(obj => scene.remove(obj));\n\n      points = null;\n      sun = null;\n      planets = [];\n\n      // === BigBang 구체형 ===\n      if (stage === \"bigbang\") {\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 200000; // 입자 수\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        const radius = 600; // 구체 반지름\n\n        for (let i = 0; i < numParticles; i++) {\n          // 구 내부 랜덤 좌표\n          const u = Math.random();\n          const v = Math.random();\n          const theta = u * 2.0 * Math.PI;\n          const phi = Math.acos(2.0 * v - 1.0);\n          const r = radius * Math.cbrt(Math.random());\n\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        points = new THREE.Points(\n          geometry,\n          new THREE.PointsMaterial({ size: 2, vertexColors: true })\n        );\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n\n      // === Galaxy 나선형 ===\n      if (stage === \"galaxy_formation\") {\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 200000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n\n        const numArms = 4; // 나선 팔 개수\n        const galaxyRadius = 6000;\n\n        for (let i = 0; i < numParticles; i++) {\n          const arm = i % numArms;\n          const radius = Math.random() * galaxyRadius;\n          const angle = radius * 0.3 + (arm * 2 * Math.PI / numArms);\n          const spin = (Math.random() - 0.5) * 0.5;\n\n          positions[i * 3] = radius * Math.cos(angle + spin);\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 200; // 두께\n          positions[i * 3 + 2] = radius * Math.sin(angle + spin);\n\n          const c = Math.random() * 0.8 + 0.2;\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        points = new THREE.Points(\n          geometry,\n          new THREE.PointsMaterial({ size: 2, vertexColors: true })\n        );\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n\n      // === Solar System ===\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n\n        planets = createPlanets(scene);\n        planets.forEach(p => {\n          p.mesh.userData.isStageObject = true;\n        });\n      }\n    };\n\n    setupStage();\n\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach(p => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy_formation\") && points) {\n        points.rotation.y += 0.0005;\n        points.rotation.z += 0.0005;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"600px\" }}>\n      <div ref={mountRef} style={{ width: \"100%\", height: \"100%\" }} />\n      <div\n        style={{\n          position: \"absolute\",\n          top: 10,\n          left: 10,\n          zIndex: 100,\n          display: \"flex\",\n          gap: \"8px\",\n          pointerEvents: \"auto\",\n        }}\n      >\n        <button onClick={() => handleStageChange(\"bigbang\")}>BigBang</button>\n        <button onClick={() => handleStageChange(\"galaxy_formation\")}>Galaxy</button>\n        <button onClick={() => handleStageChange(\"solar_system\")}>SolarSystem</button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}