{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/App.jsx\",\n  _s = $RefreshSig$();\n// src/App.jsx\nimport { useState, useEffect } from \"react\";\nimport ParticleCanvas from \"./components/ParticleCanvas\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [userid, setUserId] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n  const [status, setStatus] = useState(\"paused\");\n\n  // 처음 접속 시 userid 생성\n  useEffect(() => {\n    const initUser = async () => {\n      try {\n        const res = await axios.post(\"http://localhost:4000/api/simulation/init\");\n        setUserId(res.data.userid);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    initUser();\n  }, []);\n\n  // 서버에서 stage 가져오기\n  const fetchStage = async () => {\n    if (!userid) return;\n    try {\n      const res = await axios.get(`http://localhost:4000/api/simulation/stage/${userid}`);\n      setStage(res.data.stage);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    if (userid) fetchStage();\n  }, [userid]);\n  const startSimulation = () => setStatus(\"running\");\n  const pauseSimulation = () => setStatus(prev => prev === \"paused\" ? \"running\" : \"paused\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"BigBang Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ParticleCanvas, {\n      userid: userid,\n      stage: stage,\n      status: status,\n      startSimulation: startSimulation,\n      pauseSimulation: pauseSimulation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wx1aEW0w8pgDVx6f4hSsxwgETLM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ParticleCanvas","axios","jsxDEV","_jsxDEV","App","_s","userid","setUserId","stage","setStage","status","setStatus","initUser","res","post","data","err","console","error","fetchStage","get","startSimulation","pauseSimulation","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/App.jsx"],"sourcesContent":["// src/App.jsx\nimport { useState, useEffect } from \"react\";\nimport ParticleCanvas from \"./components/ParticleCanvas\";\nimport axios from \"axios\";\n\nexport default function App() {\n  const [userid, setUserId] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n  const [status, setStatus] = useState(\"paused\");\n\n  // 처음 접속 시 userid 생성\n  useEffect(() => {\n    const initUser = async () => {\n      try {\n        const res = await axios.post(\"http://localhost:4000/api/simulation/init\");\n        setUserId(res.data.userid);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    initUser();\n  }, []);\n\n  // 서버에서 stage 가져오기\n  const fetchStage = async () => {\n    if (!userid) return;\n    try {\n      const res = await axios.get(`http://localhost:4000/api/simulation/stage/${userid}`);\n      setStage(res.data.stage);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    if (userid) fetchStage();\n  }, [userid]);\n\n  const startSimulation = () => setStatus(\"running\");\n  const pauseSimulation = () =>\n    setStatus(prev => (prev === \"paused\" ? \"running\" : \"paused\"));\n\n  return (\n    <div>\n      <h1>BigBang Simulator</h1>\n      <ParticleCanvas\n        userid={userid}\n        stage={stage}\n        status={status}\n        startSimulation={startSimulation}\n        pauseSimulation={pauseSimulation}\n      />\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,SAAS,CAAC;EAC7C,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,QAAQ,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,2CAA2C,CAAC;QACzEP,SAAS,CAACM,GAAG,CAACE,IAAI,CAACT,MAAM,CAAC;MAC5B,CAAC,CAAC,OAAOU,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MACpB;IACF,CAAC;IACDJ,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACb,MAAM,EAAE;IACb,IAAI;MACF,MAAMO,GAAG,GAAG,MAAMZ,KAAK,CAACmB,GAAG,CAAC,8CAA8Cd,MAAM,EAAE,CAAC;MACnFG,QAAQ,CAACI,GAAG,CAACE,IAAI,CAACP,KAAK,CAAC;IAC1B,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IACpB;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,EAAEa,UAAU,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACb,MAAM,CAAC,CAAC;EAEZ,MAAMe,eAAe,GAAGA,CAAA,KAAMV,SAAS,CAAC,SAAS,CAAC;EAClD,MAAMW,eAAe,GAAGA,CAAA,KACtBX,SAAS,CAACY,IAAI,IAAKA,IAAI,KAAK,QAAQ,GAAG,SAAS,GAAG,QAAS,CAAC;EAE/D,oBACEpB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BzB,OAAA,CAACH,cAAc;MACbM,MAAM,EAAEA,MAAO;MACfE,KAAK,EAAEA,KAAM;MACbE,MAAM,EAAEA,MAAO;MACfW,eAAe,EAAEA,eAAgB;MACjCC,eAAe,EAAEA;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACvB,EAAA,CAjDuBD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}