{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { io } from \"socket.io-client\";\nimport ParticleCanvas from \"./components/ParticleCanvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\");\nexport default function App() {\n  _s();\n  const [userid, setUserId] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n  const [status, setStatus] = useState(\"paused\");\n\n  // 1. 사용자 생성\n  useEffect(() => {\n    const initUser = async () => {\n      const res = await axios.post(\"http://localhost:4000/api/user\", {\n        username: \"Guest\"\n      });\n      setUserId(res.data.userid);\n    };\n    initUser();\n  }, []);\n\n  // 2. Socket.io로 실시간 stage 업데이트 받기\n  useEffect(() => {\n    socket.on(\"stageUpdated\", ({\n      userid: u,\n      stage: s,\n      status: st\n    }) => {\n      if (u === userid) {\n        setStage(s);\n        setStatus(st);\n      }\n    });\n    return () => socket.off(\"stageUpdated\");\n  }, [userid]);\n\n  // 3. 버튼 클릭 시 서버 호출\n  const changeStage = async newStage => {\n    if (!userid) return;\n    await axios.post(\"http://localhost:4000/api/simulation/stage\", {\n      userid,\n      stage: newStage\n    });\n    setStage(newStage);\n  };\n  const startSimulation = async () => {\n    if (!userid) return;\n    const res = await axios.post(\"http://localhost:4000/api/simulation/start\", {\n      userid\n    });\n    setStage(res.data.stage);\n    setStatus(res.data.status);\n  };\n  const pauseSimulation = async () => {\n    if (!userid) return;\n    const res = await axios.post(\"http://localhost:4000/api/simulation/pause\", {\n      userid\n    });\n    setStage(res.data.stage);\n    setStatus(res.data.status);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"BigBang Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ParticleCanvas, {\n      stage: stage,\n      status: status,\n      changeStage: changeStage,\n      startSimulation: startSimulation,\n      pauseSimulation: pauseSimulation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wx1aEW0w8pgDVx6f4hSsxwgETLM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","axios","io","ParticleCanvas","jsxDEV","_jsxDEV","socket","App","_s","userid","setUserId","stage","setStage","status","setStatus","initUser","res","post","username","data","on","u","s","st","off","changeStage","newStage","startSimulation","pauseSimulation","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/App.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { io } from \"socket.io-client\";\nimport ParticleCanvas from \"./components/ParticleCanvas\";\n\nconst socket = io(\"http://localhost:4000\");\n\nexport default function App() {\n  const [userid, setUserId] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n  const [status, setStatus] = useState(\"paused\");\n\n  // 1. 사용자 생성\n  useEffect(() => {\n    const initUser = async () => {\n      const res = await axios.post(\"http://localhost:4000/api/user\", { username: \"Guest\" });\n      setUserId(res.data.userid);\n    };\n    initUser();\n  }, []);\n\n  // 2. Socket.io로 실시간 stage 업데이트 받기\n  useEffect(() => {\n    socket.on(\"stageUpdated\", ({ userid: u, stage: s, status: st }) => {\n      if (u === userid) {\n        setStage(s);\n        setStatus(st);\n      }\n    });\n    return () => socket.off(\"stageUpdated\");\n  }, [userid]);\n\n  // 3. 버튼 클릭 시 서버 호출\n  const changeStage = async (newStage) => {\n    if (!userid) return;\n    await axios.post(\"http://localhost:4000/api/simulation/stage\", { userid, stage: newStage });\n    setStage(newStage);\n  };\n\n  const startSimulation = async () => {\n    if (!userid) return;\n    const res = await axios.post(\"http://localhost:4000/api/simulation/start\", { userid });\n    setStage(res.data.stage);\n    setStatus(res.data.status);\n  };\n\n  const pauseSimulation = async () => {\n    if (!userid) return;\n    const res = await axios.post(\"http://localhost:4000/api/simulation/pause\", { userid });\n    setStage(res.data.stage);\n    setStatus(res.data.status);\n  };\n\n  return (\n    <div>\n      <h1>BigBang Simulator</h1>\n      <ParticleCanvas\n        stage={stage}\n        status={status}\n        changeStage={changeStage}\n        startSimulation={startSimulation}\n        pauseSimulation={pauseSimulation}\n      />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}