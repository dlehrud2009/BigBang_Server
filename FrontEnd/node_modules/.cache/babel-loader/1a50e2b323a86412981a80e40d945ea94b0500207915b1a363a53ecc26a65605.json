{"ast":null,"code":"import _objectSpread from\"/Users/cellia/Desktop/bigbang/FrontEnd/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/utils/solarSystem.js\nimport*as THREE from\"three\";// ----------------------\n// 스케일 상수\n// ----------------------\nconst SCALE_DISTANCE=12;// 행성 거리 스케일 상향\nconst SCALE_SIZE=16;// 행성 크기 스케일 상향\nconst SUN_SCALE=14;// 태양 크기 스케일 상향\n// ----------------------\n// 태양계 행성 데이터\n// ----------------------\nexport const solarSystemPlanets=[{name:\"Mercury\",radius:60*SCALE_DISTANCE,size:3*SCALE_SIZE,color:0x888888,speed:0.02},{name:\"Venus\",radius:90*SCALE_DISTANCE,size:6*SCALE_SIZE,color:0xffa500,speed:0.015},{name:\"Earth\",radius:120*SCALE_DISTANCE,size:8*SCALE_SIZE,color:0x00bfff,speed:0.01},{name:\"Mars\",radius:150*SCALE_DISTANCE,size:5*SCALE_SIZE,color:0xff5533,speed:0.008},{name:\"Jupiter\",radius:190*SCALE_DISTANCE,size:12*SCALE_SIZE,color:0xc48a3a,speed:0.005},{name:\"Saturn\",radius:230*SCALE_DISTANCE,size:12*SCALE_SIZE,color:0xdec07a,speed:0.004,ring:true},{name:\"Uranus\",radius:270*SCALE_DISTANCE,size:9*SCALE_SIZE,color:0x8fd6e8,speed:0.003},{name:\"Neptune\",radius:310*SCALE_DISTANCE,size:9*SCALE_SIZE,color:0x3557ff,speed:0.0025}];// ----------------------\n// Canvas 기반 절차적 텍스처 유틸\n// ----------------------\nfunction createCanvasTexture(){let width=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1024;let height=arguments.length>1&&arguments[1]!==undefined?arguments[1]:512;let draw=arguments.length>2?arguments[2]:undefined;const canvas=document.createElement('canvas');canvas.width=width;canvas.height=height;const ctx=canvas.getContext('2d');draw(ctx,width,height);const texture=new THREE.CanvasTexture(canvas);texture.wrapS=THREE.RepeatWrapping;texture.wrapT=THREE.ClampToEdgeWrapping;texture.anisotropy=8;return texture;}function noise(ctx,w,h){let alpha=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0.1;const img=ctx.getImageData(0,0,w,h);const data=img.data;for(let i=0;i<data.length;i+=4){const n=Math.random()*255;data[i]=data[i]*(1-alpha)+n*alpha;data[i+1]=data[i+1]*(1-alpha)+n*alpha;data[i+2]=data[i+2]*(1-alpha)+n*alpha;}ctx.putImageData(img,0,0);}function createPlanetTexture(name,baseHex){const base=new THREE.Color(baseHex);return createCanvasTexture(1024,512,(ctx,w,h)=>{ctx.fillStyle=\"#\".concat(base.getHexString());ctx.fillRect(0,0,w,h);if(name==='Jupiter'||name==='Saturn'){for(let y=0;y<h;y+=12){const t=y/h;const shade=0.8+Math.sin(t*Math.PI*8)*0.15;const c=base.clone().multiplyScalar(shade);ctx.fillStyle=\"#\".concat(c.getHexString());ctx.fillRect(0,y,w,10);}}else if(name==='Uranus'||name==='Neptune'){for(let y=0;y<h;y+=18){const c=base.clone().offsetHSL(0,0,(Math.random()-0.5)*0.06);ctx.fillStyle=\"#\".concat(c.getHexString());ctx.fillRect(0,y,w,12);}ctx.globalAlpha=0.15;noise(ctx,w,h,0.2);ctx.globalAlpha=1;}else if(name==='Earth'){ctx.fillStyle='#1b4d89';ctx.fillRect(0,0,w,h);ctx.fillStyle='#2ea043';for(let i=0;i<90;i++){const x=Math.random()*w;const y=Math.random()*h;const r=8+Math.random()*40;ctx.beginPath();ctx.ellipse(x,y,r*(0.8+Math.random()*0.6),r,Math.random()*Math.PI,0,Math.PI*2);ctx.fill();}ctx.globalAlpha=0.12;noise(ctx,w,h,0.4);ctx.globalAlpha=1;}else if(name==='Venus'){for(let y=0;y<h;y+=16){const c=base.clone().offsetHSL(0,0,(Math.random()-0.5)*0.1);ctx.fillStyle=\"#\".concat(c.getHexString());ctx.fillRect(0,y,w,16);}ctx.globalAlpha=0.2;noise(ctx,w,h,0.3);ctx.globalAlpha=1;}else if(name==='Mars'||name==='Mercury'){for(let i=0;i<2000;i++){const x=Math.random()*w;const y=Math.random()*h;const r=Math.random()*3+1;const c=base.clone().offsetHSL(0,0,(Math.random()-0.5)*0.15);ctx.fillStyle=\"#\".concat(c.getHexString());ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.fill();}ctx.globalAlpha=0.15;noise(ctx,w,h,0.3);ctx.globalAlpha=1;}});}function createRingTexture(){let inner=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0.6;let outer=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1.2;const size=1024;return createCanvasTexture(size,size,(ctx,w,h)=>{const cx=w/2,cy=h/2,maxR=Math.min(cx,cy);const grad=ctx.createRadialGradient(cx,cy,inner*maxR,cx,cy,outer*maxR);grad.addColorStop(0.0,'rgba(255,255,255,0.0)');grad.addColorStop(0.3,'rgba(255,255,255,0.35)');grad.addColorStop(0.6,'rgba(200,180,140,0.25)');grad.addColorStop(1.0,'rgba(255,255,255,0.0)');ctx.fillStyle=grad;ctx.fillRect(0,0,w,h);});}// ----------------------\n// 절차적 하이트맵 -> 노멀 근사 생성\n// ----------------------\nfunction createNormalMapFromHeight(heightTex){const src=heightTex.image;const w=src.width,h=src.height;const canvas=document.createElement('canvas');canvas.width=w;canvas.height=h;const ctx=canvas.getContext('2d');ctx.drawImage(src,0,0);const img=ctx.getImageData(0,0,w,h);const data=img.data;const out=ctx.createImageData(w,h);const od=out.data;const getGray=(x,y)=>{x=Math.max(0,Math.min(w-1,x));y=Math.max(0,Math.min(h-1,y));const i=(y*w+x)*4;return data[i]/255;// R 채널만 사용\n};const strength=2.0;for(let y=0;y<h;y++){for(let x=0;x<w;x++){const dx=getGray(x+1,y)-getGray(x-1,y);const dy=getGray(x,y+1)-getGray(x,y-1);let nx=-dx*strength,ny=-dy*strength,nz=1.0;const len=Math.sqrt(nx*nx+ny*ny+nz*nz)||1;nx/=len;ny/=len;nz/=len;const i=(y*w+x)*4;od[i]=Math.round((nx*0.5+0.5)*255);od[i+1]=Math.round((ny*0.5+0.5)*255);od[i+2]=Math.round((nz*0.5+0.5)*255);od[i+3]=255;}}ctx.putImageData(out,0,0);const tex=new THREE.CanvasTexture(canvas);tex.anisotropy=8;return tex;}function createProceduralPlanetMaps(name,baseHex){const width=4096,height=2048;// 고해상도 캔버스\n// 색상 맵\nconst colorTex=createPlanetTexture(name,baseHex);// 하이트맵: 행성 유형별 높이 강조\nconst heightTex=createCanvasTexture(width,height,(ctx,w,h)=>{ctx.fillStyle='rgb(127,127,127)';ctx.fillRect(0,0,w,h);if(name==='Earth'){// 대륙을 약간 높게\nctx.globalAlpha=1;ctx.fillStyle='rgb(200,200,200)';for(let i=0;i<2000;i++){const x=Math.random()*w,y=Math.random()*h;const rw=12+Math.random()*60,rh=8+Math.random()*40;ctx.beginPath();ctx.ellipse(x,y,rw,rh,Math.random()*Math.PI,0,Math.PI*2);ctx.fill();}ctx.globalAlpha=0.15;noise(ctx,w,h,0.4);ctx.globalAlpha=1;}else if(name==='Mars'||name==='Mercury'){// 크레이터 질감\nctx.fillStyle='rgb(180,180,180)';for(let i=0;i<3500;i++){const x=Math.random()*w,y=Math.random()*h,r=Math.random()*4+1;ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.fill();}ctx.globalAlpha=0.2;noise(ctx,w,h,0.5);ctx.globalAlpha=1;}else if(name==='Jupiter'||name==='Saturn'||name==='Uranus'||name==='Neptune'){// 가스 행성: 줄무늬의 높낮이 약간\nfor(let y=0;y<h;y+=6){const gray=110+Math.floor(Math.random()*30);ctx.fillStyle=\"rgb(\".concat(gray,\",\").concat(gray,\",\").concat(gray,\")\");ctx.fillRect(0,y,w,4);}ctx.globalAlpha=0.1;noise(ctx,w,h,0.3);ctx.globalAlpha=1;}});const normalTex=createNormalMapFromHeight(heightTex);return{colorTex,normalTex};}// ----------------------\n// 태양 생성\n// ----------------------\nexport function createSun(){// 그룹으로 구성: 코어 + 코로나 + 플레어\nconst sunGroup=new THREE.Group();sunGroup.userData.isSun=true;// 코어 텍스처(절차적) - 화소 노이즈 + 띠그라데이션\nconst coreTex=createCanvasTexture(2048,1024,(ctx,w,h)=>{const grad=ctx.createLinearGradient(0,0,0,h);grad.addColorStop(0,'#fff59e');grad.addColorStop(0.5,'#ffcc33');grad.addColorStop(1,'#ff9933');ctx.fillStyle=grad;ctx.fillRect(0,0,w,h);ctx.globalAlpha=0.25;noise(ctx,w,h,0.6);ctx.globalAlpha=1;});const coreGeo=new THREE.SphereGeometry(10,128,128);const coreMat=new THREE.MeshStandardMaterial({map:coreTex,color:0xffffff,emissive:new THREE.Color(0xffc83a),emissiveMap:coreTex,emissiveIntensity:1.4,metalness:0.0,roughness:0.2});const core=new THREE.Mesh(coreGeo,coreMat);core.scale.set(SUN_SCALE,SUN_SCALE,SUN_SCALE);sunGroup.add(core);// 코로나(발광 스프라이트)\nconst glowTex=createCanvasTexture(1024,1024,(ctx,w,h)=>{const cx=w/2,cy=h/2,r=Math.min(cx,cy);const g=ctx.createRadialGradient(cx,cy,r*0.1,cx,cy,r);g.addColorStop(0.0,'rgba(255,220,120,0.9)');g.addColorStop(0.4,'rgba(255,180,60,0.35)');g.addColorStop(1.0,'rgba(255,140,30,0.0)');ctx.fillStyle=g;ctx.fillRect(0,0,w,h);});const glowMat=new THREE.SpriteMaterial({map:glowTex,color:0xffffff,transparent:true,depthWrite:false,blending:THREE.AdditiveBlending});const glow=new THREE.Sprite(glowMat);const glowScale=1.9*SUN_SCALE*10;// 코어 대비 크게\nglow.scale.set(glowScale,glowScale,1);sunGroup.add(glow);// 간단한 플레어(토러스) 몇 개 추가\nconst flareMat=new THREE.MeshBasicMaterial({color:0xffcc66,transparent:true,opacity:0.35,blending:THREE.AdditiveBlending});const flare1=new THREE.Mesh(new THREE.TorusGeometry(10.5,0.15,8,64),flareMat);const flare2=new THREE.Mesh(new THREE.TorusGeometry(11.0,0.12,8,64),flareMat);flare1.rotation.x=Math.PI/4;flare1.rotation.y=Math.PI/6;flare2.rotation.x=-Math.PI/6;flare2.rotation.y=Math.PI/3;flare1.scale.set(SUN_SCALE,SUN_SCALE,SUN_SCALE);flare2.scale.set(SUN_SCALE,SUN_SCALE,SUN_SCALE);sunGroup.add(flare1);sunGroup.add(flare2);return sunGroup;}// ----------------------\n// 행성 생성\n// ----------------------\nexport function createPlanets(scene,CSS2DObject){return solarSystemPlanets.map(p=>{var _rotationMap$p$name;const geo=new THREE.SphereGeometry(p.size,96,96);let mat;const{colorTex,normalTex}=createProceduralPlanetMaps(p.name,p.color);// 야간 발광(지구만 약하게)\nlet emissive=undefined,emissiveIntensity=0.0;if(p.name==='Earth'){emissive=new THREE.Color(0x222244);emissiveIntensity=0.15;}mat=new THREE.MeshStandardMaterial({map:colorTex,normalMap:normalTex,normalScale:new THREE.Vector2(1.0,1.0),roughness:0.9,metalness:0.0,emissive,emissiveIntensity});const mesh=new THREE.Mesh(geo,mat);// 자전축 기울기\nconst tilts={Mercury:0.01,Venus:177*Math.PI/180,Earth:23.5*Math.PI/180,Mars:25*Math.PI/180,Jupiter:3*Math.PI/180,Saturn:27*Math.PI/180,Uranus:98*Math.PI/180,Neptune:28*Math.PI/180};mesh.rotation.z=tilts[p.name]||0;// 토성 고리\nif(p.ring){const inner=p.size*1.5;const outer=p.size*2.8;const ringGeo=new THREE.RingGeometry(inner,outer,256);const ringTex=createRingTexture(inner/outer*0.9,1.0);ringTex.wrapS=THREE.RepeatWrapping;ringTex.wrapT=THREE.RepeatWrapping;const ringMat=new THREE.MeshBasicMaterial({map:ringTex,side:THREE.DoubleSide,transparent:true,opacity:0.9});const ring=new THREE.Mesh(ringGeo,ringMat);ring.rotation.x=-Math.PI/2;ring.userData.isRing=true;mesh.add(ring);}// 지구 구름 레이어\nif(p.name==='Earth'){const cloudsGeo=new THREE.SphereGeometry(p.size*1.02,96,96);const cloudsTex=createCanvasTexture(1024,512,(ctx,w,h)=>{ctx.fillStyle='rgba(255,255,255,0)';ctx.fillRect(0,0,w,h);ctx.fillStyle='rgba(255,255,255,0.65)';for(let i=0;i<250;i++){const x=Math.random()*w;const y=Math.random()*h;const rw=30+Math.random()*120;const rh=12+Math.random()*40;ctx.beginPath();ctx.ellipse(x,y,rw,rh,Math.random()*Math.PI,0,Math.PI*2);ctx.fill();}ctx.globalAlpha=0.25;noise(ctx,w,h,0.2);ctx.globalAlpha=1;});const cloudsMat=new THREE.MeshStandardMaterial({map:cloudsTex,transparent:true,opacity:0.45,depthWrite:false});const clouds=new THREE.Mesh(cloudsGeo,cloudsMat);clouds.userData.isClouds=true;mesh.add(clouds);// 대기권(프레넬 근사): 카메라 각도에서 가장자리만 더 보이게\nconst atmosphereGeo=new THREE.SphereGeometry(p.size*1.06,96,96);const atmosphereMat=new THREE.MeshBasicMaterial({color:0x66aaff,transparent:true,opacity:0.06});const atmosphere=new THREE.Mesh(atmosphereGeo,atmosphereMat);atmosphere.userData.isAtmosphere=true;mesh.add(atmosphere);}mesh.userData.isPlanet=true;scene.add(mesh);// 행성 라벨\nif(CSS2DObject){const labelDiv=document.createElement(\"div\");labelDiv.className=\"label\";labelDiv.textContent=p.name;labelDiv.style.color=\"white\";labelDiv.style.fontSize=\"20px\";labelDiv.style.fontFamily=\"Arial\";labelDiv.style.pointerEvents=\"none\";const label=new CSS2DObject(labelDiv);label.position.set(0,p.size+10,0);mesh.add(label);}// 궤도 생성\nconst segments=128;const orbitPositions=[];for(let i=0;i<=segments;i++){const theta=i/segments*2*Math.PI;orbitPositions.push(p.radius*Math.cos(theta),0,p.radius*Math.sin(theta));}const orbitGeo=new THREE.BufferGeometry();orbitGeo.setAttribute(\"position\",new THREE.Float32BufferAttribute(orbitPositions,3));const orbitMat=new THREE.LineBasicMaterial({color:0xffffff,transparent:true,opacity:0.2});const orbitLine=new THREE.LineLoop(orbitGeo,orbitMat);orbitLine.userData.isOrbit=true;scene.add(orbitLine);const baseRotation=0.01;const rotationMap={Mercury:0.002,Venus:-0.001,Earth:0.02,Mars:0.018,Jupiter:0.05,Saturn:0.04,Uranus:-0.03,Neptune:0.03};const rotationSpeed=(_rotationMap$p$name=rotationMap[p.name])!==null&&_rotationMap$p$name!==void 0?_rotationMap$p$name:baseRotation;return _objectSpread(_objectSpread({},p),{},{mesh,angle:Math.random()*Math.PI*2,rotationSpeed});});}// ----------------------\n// 행성 위치 업데이트\n// ----------------------\nexport function updatePlanetPositions(planets){planets.forEach(p=>{p.angle+=p.speed;p.mesh.position.x=p.radius*Math.cos(p.angle);p.mesh.position.z=p.radius*Math.sin(p.angle);if(p.rotationSpeed){p.mesh.rotation.y+=p.rotationSpeed;const clouds=p.mesh.children&&p.mesh.children.find(c=>c.userData&&c.userData.isClouds);if(clouds)clouds.rotation.y+=p.rotationSpeed*1.2;}});}// ----------------------\n// 은하 생성\n// ----------------------\nexport function generateGalaxy(){let numStars=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5000;const geometry=new THREE.BufferGeometry();const positions=new Float32Array(numStars*3);const colors=new Float32Array(numStars*3);const color=new THREE.Color();for(let i=0;i<numStars;i++){const branch=i%4;const radius=Math.random()*400;const angle=radius*0.1+branch*Math.PI/2;const spread=(Math.random()-0.5)*15;positions[i*3]=radius*Math.cos(angle)+spread;positions[i*3+1]=(Math.random()-0.5)*50;positions[i*3+2]=radius*Math.sin(angle)+spread;const c=Math.random()*0.8+0.2;color.setRGB(c,c,c);colors[i*3]=color.r;colors[i*3+1]=color.g;colors[i*3+2]=color.b;}geometry.setAttribute(\"position\",new THREE.BufferAttribute(positions,3));geometry.setAttribute(\"color\",new THREE.BufferAttribute(colors,3));return new THREE.Points(geometry,new THREE.PointsMaterial({size:2,vertexColors:true}));}","map":{"version":3,"names":["THREE","SCALE_DISTANCE","SCALE_SIZE","SUN_SCALE","solarSystemPlanets","name","radius","size","color","speed","ring","createCanvasTexture","width","arguments","length","undefined","height","draw","canvas","document","createElement","ctx","getContext","texture","CanvasTexture","wrapS","RepeatWrapping","wrapT","ClampToEdgeWrapping","anisotropy","noise","w","h","alpha","img","getImageData","data","i","n","Math","random","putImageData","createPlanetTexture","baseHex","base","Color","fillStyle","concat","getHexString","fillRect","y","t","shade","sin","PI","c","clone","multiplyScalar","offsetHSL","globalAlpha","x","r","beginPath","ellipse","fill","arc","createRingTexture","inner","outer","cx","cy","maxR","min","grad","createRadialGradient","addColorStop","createNormalMapFromHeight","heightTex","src","image","drawImage","out","createImageData","od","getGray","max","strength","dx","dy","nx","ny","nz","len","sqrt","round","tex","createProceduralPlanetMaps","colorTex","rw","rh","gray","floor","normalTex","createSun","sunGroup","Group","userData","isSun","coreTex","createLinearGradient","coreGeo","SphereGeometry","coreMat","MeshStandardMaterial","map","emissive","emissiveMap","emissiveIntensity","metalness","roughness","core","Mesh","scale","set","add","glowTex","g","glowMat","SpriteMaterial","transparent","depthWrite","blending","AdditiveBlending","glow","Sprite","glowScale","flareMat","MeshBasicMaterial","opacity","flare1","TorusGeometry","flare2","rotation","createPlanets","scene","CSS2DObject","p","_rotationMap$p$name","geo","mat","normalMap","normalScale","Vector2","mesh","tilts","Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune","z","ringGeo","RingGeometry","ringTex","ringMat","side","DoubleSide","isRing","cloudsGeo","cloudsTex","cloudsMat","clouds","isClouds","atmosphereGeo","atmosphereMat","atmosphere","isAtmosphere","isPlanet","labelDiv","className","textContent","style","fontSize","fontFamily","pointerEvents","label","position","segments","orbitPositions","theta","push","cos","orbitGeo","BufferGeometry","setAttribute","Float32BufferAttribute","orbitMat","LineBasicMaterial","orbitLine","LineLoop","isOrbit","baseRotation","rotationMap","rotationSpeed","_objectSpread","angle","updatePlanetPositions","planets","forEach","children","find","generateGalaxy","numStars","geometry","positions","Float32Array","colors","branch","spread","setRGB","b","BufferAttribute","Points","PointsMaterial","vertexColors"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/utils/solarSystem.js"],"sourcesContent":["// src/utils/solarSystem.js\nimport * as THREE from \"three\";\n\n// ----------------------\n// 스케일 상수\n// ----------------------\nconst SCALE_DISTANCE = 12; // 행성 거리 스케일 상향\nconst SCALE_SIZE = 16;     // 행성 크기 스케일 상향\nconst SUN_SCALE = 14;      // 태양 크기 스케일 상향\n\n// ----------------------\n// 태양계 행성 데이터\n// ----------------------\nexport const solarSystemPlanets = [\n  { name: \"Mercury\", radius: 60 * SCALE_DISTANCE, size: 3 * SCALE_SIZE, color: 0x888888, speed: 0.02 },\n  { name: \"Venus\",   radius: 90 * SCALE_DISTANCE, size: 6 * SCALE_SIZE, color: 0xffa500, speed: 0.015 },\n  { name: \"Earth\",   radius: 120 * SCALE_DISTANCE, size: 8 * SCALE_SIZE, color: 0x00bfff, speed: 0.01 },\n  { name: \"Mars\",    radius: 150 * SCALE_DISTANCE, size: 5 * SCALE_SIZE, color: 0xff5533, speed: 0.008 },\n  { name: \"Jupiter\", radius: 190 * SCALE_DISTANCE, size: 12 * SCALE_SIZE, color: 0xc48a3a, speed: 0.005 },\n  { name: \"Saturn\",  radius: 230 * SCALE_DISTANCE, size: 12 * SCALE_SIZE, color: 0xdec07a, speed: 0.004, ring: true },\n  { name: \"Uranus\",  radius: 270 * SCALE_DISTANCE, size: 9 * SCALE_SIZE, color: 0x8fd6e8, speed: 0.003 },\n  { name: \"Neptune\", radius: 310 * SCALE_DISTANCE, size: 9 * SCALE_SIZE, color: 0x3557ff, speed: 0.0025 },\n];\n\n// ----------------------\n// Canvas 기반 절차적 텍스처 유틸\n// ----------------------\nfunction createCanvasTexture(width = 1024, height = 512, draw) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  draw(ctx, width, height);\n  const texture = new THREE.CanvasTexture(canvas);\n  texture.wrapS = THREE.RepeatWrapping;\n  texture.wrapT = THREE.ClampToEdgeWrapping;\n  texture.anisotropy = 8;\n  return texture;\n}\n\nfunction noise(ctx, w, h, alpha = 0.1) {\n  const img = ctx.getImageData(0, 0, w, h);\n  const data = img.data;\n  for (let i = 0; i < data.length; i += 4) {\n    const n = Math.random() * 255;\n    data[i] = (data[i] * (1 - alpha)) + n * alpha;\n    data[i + 1] = (data[i + 1] * (1 - alpha)) + n * alpha;\n    data[i + 2] = (data[i + 2] * (1 - alpha)) + n * alpha;\n  }\n  ctx.putImageData(img, 0, 0);\n}\n\nfunction createPlanetTexture(name, baseHex) {\n  const base = new THREE.Color(baseHex);\n  return createCanvasTexture(1024, 512, (ctx, w, h) => {\n    ctx.fillStyle = `#${base.getHexString()}`;\n    ctx.fillRect(0, 0, w, h);\n\n    if (name === 'Jupiter' || name === 'Saturn') {\n      for (let y = 0; y < h; y += 12) {\n        const t = y / h;\n        const shade = 0.8 + Math.sin(t * Math.PI * 8) * 0.15;\n        const c = base.clone().multiplyScalar(shade);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 10);\n      }\n    } else if (name === 'Uranus' || name === 'Neptune') {\n      for (let y = 0; y < h; y += 18) {\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.06);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 12);\n      }\n      ctx.globalAlpha = 0.15; noise(ctx, w, h, 0.2); ctx.globalAlpha = 1;\n    } else if (name === 'Earth') {\n      ctx.fillStyle = '#1b4d89';\n      ctx.fillRect(0, 0, w, h);\n      ctx.fillStyle = '#2ea043';\n      for (let i = 0; i < 90; i++) {\n        const x = Math.random() * w;\n        const y = Math.random() * h;\n        const r = 8 + Math.random() * 40;\n        ctx.beginPath();\n        ctx.ellipse(x, y, r * (0.8 + Math.random()*0.6), r, Math.random()*Math.PI, 0, Math.PI*2);\n        ctx.fill();\n      }\n      ctx.globalAlpha = 0.12; noise(ctx, w, h, 0.4); ctx.globalAlpha = 1;\n    } else if (name === 'Venus') {\n      for (let y = 0; y < h; y += 16) {\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.1);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.fillRect(0, y, w, 16);\n      }\n      ctx.globalAlpha = 0.2; noise(ctx, w, h, 0.3); ctx.globalAlpha = 1;\n    } else if (name === 'Mars' || name === 'Mercury') {\n      for (let i = 0; i < 2000; i++) {\n        const x = Math.random() * w;\n        const y = Math.random() * h;\n        const r = Math.random() * 3 + 1;\n        const c = base.clone().offsetHSL(0, 0, (Math.random() - 0.5) * 0.15);\n        ctx.fillStyle = `#${c.getHexString()}`;\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      ctx.globalAlpha = 0.15; noise(ctx, w, h, 0.3); ctx.globalAlpha = 1;\n    }\n  });\n}\n\nfunction createRingTexture(inner = 0.6, outer = 1.2) {\n  const size = 1024;\n  return createCanvasTexture(size, size, (ctx, w, h) => {\n    const cx = w / 2, cy = h / 2, maxR = Math.min(cx, cy);\n    const grad = ctx.createRadialGradient(cx, cy, inner * maxR, cx, cy, outer * maxR);\n    grad.addColorStop(0.0, 'rgba(255,255,255,0.0)');\n    grad.addColorStop(0.3, 'rgba(255,255,255,0.35)');\n    grad.addColorStop(0.6, 'rgba(200,180,140,0.25)');\n    grad.addColorStop(1.0, 'rgba(255,255,255,0.0)');\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, w, h);\n  });\n}\n\n// ----------------------\n// 절차적 하이트맵 -> 노멀 근사 생성\n// ----------------------\nfunction createNormalMapFromHeight(heightTex) {\n  const src = heightTex.image;\n  const w = src.width, h = src.height;\n  const canvas = document.createElement('canvas');\n  canvas.width = w; canvas.height = h;\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(src, 0, 0);\n  const img = ctx.getImageData(0, 0, w, h);\n  const data = img.data;\n  const out = ctx.createImageData(w, h);\n  const od = out.data;\n  const getGray = (x, y) => {\n    x = Math.max(0, Math.min(w - 1, x));\n    y = Math.max(0, Math.min(h - 1, y));\n    const i = (y * w + x) * 4;\n    return data[i] / 255; // R 채널만 사용\n  };\n  const strength = 2.0;\n  for (let y = 0; y < h; y++) {\n    for (let x = 0; x < w; x++) {\n      const dx = getGray(x + 1, y) - getGray(x - 1, y);\n      const dy = getGray(x, y + 1) - getGray(x, y - 1);\n      let nx = -dx * strength, ny = -dy * strength, nz = 1.0;\n      const len = Math.sqrt(nx * nx + ny * ny + nz * nz) || 1;\n      nx /= len; ny /= len; nz /= len;\n      const i = (y * w + x) * 4;\n      od[i] = Math.round((nx * 0.5 + 0.5) * 255);\n      od[i + 1] = Math.round((ny * 0.5 + 0.5) * 255);\n      od[i + 2] = Math.round((nz * 0.5 + 0.5) * 255);\n      od[i + 3] = 255;\n    }\n  }\n  ctx.putImageData(out, 0, 0);\n  const tex = new THREE.CanvasTexture(canvas);\n  tex.anisotropy = 8;\n  return tex;\n}\n\nfunction createProceduralPlanetMaps(name, baseHex) {\n  const width = 4096, height = 2048; // 고해상도 캔버스\n  // 색상 맵\n  const colorTex = createPlanetTexture(name, baseHex);\n  // 하이트맵: 행성 유형별 높이 강조\n  const heightTex = createCanvasTexture(width, height, (ctx, w, h) => {\n    ctx.fillStyle = 'rgb(127,127,127)';\n    ctx.fillRect(0, 0, w, h);\n    if (name === 'Earth') {\n      // 대륙을 약간 높게\n      ctx.globalAlpha = 1;\n      ctx.fillStyle = 'rgb(200,200,200)';\n      for (let i = 0; i < 2000; i++) {\n        const x = Math.random() * w, y = Math.random() * h;\n        const rw = 12 + Math.random() * 60, rh = 8 + Math.random() * 40;\n        ctx.beginPath();\n        ctx.ellipse(x, y, rw, rh, Math.random() * Math.PI, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      ctx.globalAlpha = 0.15; noise(ctx, w, h, 0.4); ctx.globalAlpha = 1;\n    } else if (name === 'Mars' || name === 'Mercury') {\n      // 크레이터 질감\n      ctx.fillStyle = 'rgb(180,180,180)';\n      for (let i = 0; i < 3500; i++) {\n        const x = Math.random() * w, y = Math.random() * h, r = Math.random() * 4 + 1;\n        ctx.beginPath(); ctx.arc(x, y, r, 0, Math.PI * 2); ctx.fill();\n      }\n      ctx.globalAlpha = 0.2; noise(ctx, w, h, 0.5); ctx.globalAlpha = 1;\n    } else if (name === 'Jupiter' || name === 'Saturn' || name === 'Uranus' || name === 'Neptune') {\n      // 가스 행성: 줄무늬의 높낮이 약간\n      for (let y = 0; y < h; y += 6) {\n        const gray = 110 + Math.floor(Math.random() * 30);\n        ctx.fillStyle = `rgb(${gray},${gray},${gray})`;\n        ctx.fillRect(0, y, w, 4);\n      }\n      ctx.globalAlpha = 0.1; noise(ctx, w, h, 0.3); ctx.globalAlpha = 1;\n    }\n  });\n  const normalTex = createNormalMapFromHeight(heightTex);\n  return { colorTex, normalTex };\n}\n\n// ----------------------\n// 태양 생성\n// ----------------------\nexport function createSun() {\n  // 그룹으로 구성: 코어 + 코로나 + 플레어\n  const sunGroup = new THREE.Group();\n  sunGroup.userData.isSun = true;\n\n  // 코어 텍스처(절차적) - 화소 노이즈 + 띠그라데이션\n  const coreTex = createCanvasTexture(2048, 1024, (ctx, w, h) => {\n    const grad = ctx.createLinearGradient(0, 0, 0, h);\n    grad.addColorStop(0, '#fff59e');\n    grad.addColorStop(0.5, '#ffcc33');\n    grad.addColorStop(1, '#ff9933');\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, w, h);\n    ctx.globalAlpha = 0.25; noise(ctx, w, h, 0.6); ctx.globalAlpha = 1;\n  });\n\n  const coreGeo = new THREE.SphereGeometry(10, 128, 128);\n  const coreMat = new THREE.MeshStandardMaterial({\n    map: coreTex,\n    color: 0xffffff,\n    emissive: new THREE.Color(0xffc83a),\n    emissiveMap: coreTex,\n    emissiveIntensity: 1.4,\n    metalness: 0.0,\n    roughness: 0.2,\n  });\n  const core = new THREE.Mesh(coreGeo, coreMat);\n  core.scale.set(SUN_SCALE, SUN_SCALE, SUN_SCALE);\n  sunGroup.add(core);\n\n  // 코로나(발광 스프라이트)\n  const glowTex = createCanvasTexture(1024, 1024, (ctx, w, h) => {\n    const cx = w/2, cy = h/2, r = Math.min(cx, cy);\n    const g = ctx.createRadialGradient(cx, cy, r*0.1, cx, cy, r);\n    g.addColorStop(0.0, 'rgba(255,220,120,0.9)');\n    g.addColorStop(0.4, 'rgba(255,180,60,0.35)');\n    g.addColorStop(1.0, 'rgba(255,140,30,0.0)');\n    ctx.fillStyle = g;\n    ctx.fillRect(0, 0, w, h);\n  });\n  const glowMat = new THREE.SpriteMaterial({ map: glowTex, color: 0xffffff, transparent: true, depthWrite: false, blending: THREE.AdditiveBlending });\n  const glow = new THREE.Sprite(glowMat);\n  const glowScale = 1.9 * SUN_SCALE * 10; // 코어 대비 크게\n  glow.scale.set(glowScale, glowScale, 1);\n  sunGroup.add(glow);\n\n  // 간단한 플레어(토러스) 몇 개 추가\n  const flareMat = new THREE.MeshBasicMaterial({ color: 0xffcc66, transparent: true, opacity: 0.35, blending: THREE.AdditiveBlending });\n  const flare1 = new THREE.Mesh(new THREE.TorusGeometry(10.5, 0.15, 8, 64), flareMat);\n  const flare2 = new THREE.Mesh(new THREE.TorusGeometry(11.0, 0.12, 8, 64), flareMat);\n  flare1.rotation.x = Math.PI / 4; flare1.rotation.y = Math.PI / 6;\n  flare2.rotation.x = -Math.PI / 6; flare2.rotation.y = Math.PI / 3;\n  flare1.scale.set(SUN_SCALE, SUN_SCALE, SUN_SCALE);\n  flare2.scale.set(SUN_SCALE, SUN_SCALE, SUN_SCALE);\n  sunGroup.add(flare1);\n  sunGroup.add(flare2);\n\n  return sunGroup;\n}\n\n// ----------------------\n// 행성 생성\n// ----------------------\nexport function createPlanets(scene, CSS2DObject) {\n  return solarSystemPlanets.map(p => {\n    const geo = new THREE.SphereGeometry(p.size, 96, 96);\n    let mat;\n    const { colorTex, normalTex } = createProceduralPlanetMaps(p.name, p.color);\n    // 야간 발광(지구만 약하게)\n    let emissive = undefined, emissiveIntensity = 0.0;\n    if (p.name === 'Earth') {\n      emissive = new THREE.Color(0x222244);\n      emissiveIntensity = 0.15;\n    }\n    mat = new THREE.MeshStandardMaterial({\n      map: colorTex,\n      normalMap: normalTex,\n      normalScale: new THREE.Vector2(1.0, 1.0),\n      roughness: 0.9,\n      metalness: 0.0,\n      emissive,\n      emissiveIntensity,\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 자전축 기울기\n    const tilts = { Mercury: 0.01, Venus: 177 * Math.PI/180, Earth: 23.5 * Math.PI/180, Mars: 25 * Math.PI/180, Jupiter: 3 * Math.PI/180, Saturn: 27 * Math.PI/180, Uranus: 98 * Math.PI/180, Neptune: 28 * Math.PI/180 };\n    mesh.rotation.z = tilts[p.name] || 0;\n\n    // 토성 고리\n    if (p.ring) {\n      const inner = p.size * 1.5;\n      const outer = p.size * 2.8;\n      const ringGeo = new THREE.RingGeometry(inner, outer, 256);\n      const ringTex = createRingTexture(inner/outer * 0.9, 1.0);\n      ringTex.wrapS = THREE.RepeatWrapping;\n      ringTex.wrapT = THREE.RepeatWrapping;\n      const ringMat = new THREE.MeshBasicMaterial({ map: ringTex, side: THREE.DoubleSide, transparent: true, opacity: 0.9 });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      ring.userData.isRing = true;\n      mesh.add(ring);\n    }\n\n    // 지구 구름 레이어\n    if (p.name === 'Earth') {\n      const cloudsGeo = new THREE.SphereGeometry(p.size * 1.02, 96, 96);\n      const cloudsTex = createCanvasTexture(1024, 512, (ctx, w, h) => {\n        ctx.fillStyle = 'rgba(255,255,255,0)';\n        ctx.fillRect(0, 0, w, h);\n        ctx.fillStyle = 'rgba(255,255,255,0.65)';\n        for (let i = 0; i < 250; i++) {\n          const x = Math.random() * w;\n          const y = Math.random() * h;\n          const rw = 30 + Math.random() * 120;\n          const rh = 12 + Math.random() * 40;\n          ctx.beginPath();\n          ctx.ellipse(x, y, rw, rh, Math.random() * Math.PI, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        ctx.globalAlpha = 0.25; noise(ctx, w, h, 0.2); ctx.globalAlpha = 1;\n      });\n      const cloudsMat = new THREE.MeshStandardMaterial({ map: cloudsTex, transparent: true, opacity: 0.45, depthWrite: false });\n      const clouds = new THREE.Mesh(cloudsGeo, cloudsMat);\n      clouds.userData.isClouds = true;\n      mesh.add(clouds);\n\n      // 대기권(프레넬 근사): 카메라 각도에서 가장자리만 더 보이게\n      const atmosphereGeo = new THREE.SphereGeometry(p.size * 1.06, 96, 96);\n      const atmosphereMat = new THREE.MeshBasicMaterial({ color: 0x66aaff, transparent: true, opacity: 0.06 });\n      const atmosphere = new THREE.Mesh(atmosphereGeo, atmosphereMat);\n      atmosphere.userData.isAtmosphere = true;\n      mesh.add(atmosphere);\n    }\n\n\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 행성 라벨\n    if (CSS2DObject) {\n      const labelDiv = document.createElement(\"div\");\n      labelDiv.className = \"label\";\n      labelDiv.textContent = p.name;\n      labelDiv.style.color = \"white\";\n      labelDiv.style.fontSize = \"20px\";\n      labelDiv.style.fontFamily = \"Arial\";\n      labelDiv.style.pointerEvents = \"none\";\n      const label = new CSS2DObject(labelDiv);\n      label.position.set(0, p.size + 10, 0);\n      mesh.add(label);\n    }\n\n    // 궤도 생성\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = (i / segments) * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.2 });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n\n    const baseRotation = 0.01;\n    const rotationMap = { Mercury: 0.002, Venus: -0.001, Earth: 0.02, Mars: 0.018, Jupiter: 0.05, Saturn: 0.04, Uranus: -0.03, Neptune: 0.03 };\n    const rotationSpeed = rotationMap[p.name] ?? baseRotation;\n    return { ...p, mesh, angle: Math.random() * Math.PI * 2, rotationSpeed };\n  });\n}\n\n// ----------------------\n// 행성 위치 업데이트\n// ----------------------\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n    if (p.rotationSpeed) {\n      p.mesh.rotation.y += p.rotationSpeed;\n      const clouds = p.mesh.children && p.mesh.children.find(c => c.userData && c.userData.isClouds);\n      if (clouds) clouds.rotation.y += p.rotationSpeed * 1.2;\n    }\n  });\n}\n\n// ----------------------\n// 은하 생성\n// ----------------------\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n  return new THREE.Points(\n    geometry,\n    new THREE.PointsMaterial({ size: 2, vertexColors: true })\n  );\n}"],"mappings":"2HAAA;AACA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B;AACA;AACA;AACA,KAAM,CAAAC,cAAc,CAAG,EAAE,CAAE;AAC3B,KAAM,CAAAC,UAAU,CAAG,EAAE,CAAM;AAC3B,KAAM,CAAAC,SAAS,CAAG,EAAE,CAAO;AAE3B;AACA;AACA;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAG,CAChC,CAAEC,IAAI,CAAE,SAAS,CAAEC,MAAM,CAAE,EAAE,CAAGL,cAAc,CAAEM,IAAI,CAAE,CAAC,CAAGL,UAAU,CAAEM,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,IAAK,CAAC,CACpG,CAAEJ,IAAI,CAAE,OAAO,CAAIC,MAAM,CAAE,EAAE,CAAGL,cAAc,CAAEM,IAAI,CAAE,CAAC,CAAGL,UAAU,CAAEM,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,KAAM,CAAC,CACrG,CAAEJ,IAAI,CAAE,OAAO,CAAIC,MAAM,CAAE,GAAG,CAAGL,cAAc,CAAEM,IAAI,CAAE,CAAC,CAAGL,UAAU,CAAEM,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,IAAK,CAAC,CACrG,CAAEJ,IAAI,CAAE,MAAM,CAAKC,MAAM,CAAE,GAAG,CAAGL,cAAc,CAAEM,IAAI,CAAE,CAAC,CAAGL,UAAU,CAAEM,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,KAAM,CAAC,CACtG,CAAEJ,IAAI,CAAE,SAAS,CAAEC,MAAM,CAAE,GAAG,CAAGL,cAAc,CAAEM,IAAI,CAAE,EAAE,CAAGL,UAAU,CAAEM,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,KAAM,CAAC,CACvG,CAAEJ,IAAI,CAAE,QAAQ,CAAGC,MAAM,CAAE,GAAG,CAAGL,cAAc,CAAEM,IAAI,CAAE,EAAE,CAAGL,UAAU,CAAEM,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,KAAK,CAAEC,IAAI,CAAE,IAAK,CAAC,CACnH,CAAEL,IAAI,CAAE,QAAQ,CAAGC,MAAM,CAAE,GAAG,CAAGL,cAAc,CAAEM,IAAI,CAAE,CAAC,CAAGL,UAAU,CAAEM,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,KAAM,CAAC,CACtG,CAAEJ,IAAI,CAAE,SAAS,CAAEC,MAAM,CAAE,GAAG,CAAGL,cAAc,CAAEM,IAAI,CAAE,CAAC,CAAGL,UAAU,CAAEM,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,MAAO,CAAC,CACxG,CAED;AACA;AACA;AACA,QAAS,CAAAE,mBAAmBA,CAAA,CAAmC,IAAlC,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,IAAE,CAAAG,MAAM,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,IAAE,CAAAI,IAAI,CAAAJ,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CAC3D,KAAM,CAAAG,MAAM,CAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAC/CF,MAAM,CAACN,KAAK,CAAGA,KAAK,CACpBM,MAAM,CAACF,MAAM,CAAGA,MAAM,CACtB,KAAM,CAAAK,GAAG,CAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC,CACnCL,IAAI,CAACI,GAAG,CAAET,KAAK,CAAEI,MAAM,CAAC,CACxB,KAAM,CAAAO,OAAO,CAAG,GAAI,CAAAvB,KAAK,CAACwB,aAAa,CAACN,MAAM,CAAC,CAC/CK,OAAO,CAACE,KAAK,CAAGzB,KAAK,CAAC0B,cAAc,CACpCH,OAAO,CAACI,KAAK,CAAG3B,KAAK,CAAC4B,mBAAmB,CACzCL,OAAO,CAACM,UAAU,CAAG,CAAC,CACtB,MAAO,CAAAN,OAAO,CAChB,CAEA,QAAS,CAAAO,KAAKA,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAe,IAAb,CAAAC,KAAK,CAAApB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CACnC,KAAM,CAAAqB,GAAG,CAAGb,GAAG,CAACc,YAAY,CAAC,CAAC,CAAE,CAAC,CAAEJ,CAAC,CAAEC,CAAC,CAAC,CACxC,KAAM,CAAAI,IAAI,CAAGF,GAAG,CAACE,IAAI,CACrB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,IAAI,CAACtB,MAAM,CAAEuB,CAAC,EAAI,CAAC,CAAE,CACvC,KAAM,CAAAC,CAAC,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAC7BJ,IAAI,CAACC,CAAC,CAAC,CAAID,IAAI,CAACC,CAAC,CAAC,EAAI,CAAC,CAAGJ,KAAK,CAAC,CAAIK,CAAC,CAAGL,KAAK,CAC7CG,IAAI,CAACC,CAAC,CAAG,CAAC,CAAC,CAAID,IAAI,CAACC,CAAC,CAAG,CAAC,CAAC,EAAI,CAAC,CAAGJ,KAAK,CAAC,CAAIK,CAAC,CAAGL,KAAK,CACrDG,IAAI,CAACC,CAAC,CAAG,CAAC,CAAC,CAAID,IAAI,CAACC,CAAC,CAAG,CAAC,CAAC,EAAI,CAAC,CAAGJ,KAAK,CAAC,CAAIK,CAAC,CAAGL,KAAK,CACvD,CACAZ,GAAG,CAACoB,YAAY,CAACP,GAAG,CAAE,CAAC,CAAE,CAAC,CAAC,CAC7B,CAEA,QAAS,CAAAQ,mBAAmBA,CAACrC,IAAI,CAAEsC,OAAO,CAAE,CAC1C,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAA5C,KAAK,CAAC6C,KAAK,CAACF,OAAO,CAAC,CACrC,MAAO,CAAAhC,mBAAmB,CAAC,IAAI,CAAE,GAAG,CAAE,CAACU,GAAG,CAAEU,CAAC,CAAEC,CAAC,GAAK,CACnDX,GAAG,CAACyB,SAAS,KAAAC,MAAA,CAAOH,IAAI,CAACI,YAAY,CAAC,CAAC,CAAE,CACzC3B,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAElB,CAAC,CAAEC,CAAC,CAAC,CAExB,GAAI3B,IAAI,GAAK,SAAS,EAAIA,IAAI,GAAK,QAAQ,CAAE,CAC3C,IAAK,GAAI,CAAA6C,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGlB,CAAC,CAAEkB,CAAC,EAAI,EAAE,CAAE,CAC9B,KAAM,CAAAC,CAAC,CAAGD,CAAC,CAAGlB,CAAC,CACf,KAAM,CAAAoB,KAAK,CAAG,GAAG,CAAGb,IAAI,CAACc,GAAG,CAACF,CAAC,CAAGZ,IAAI,CAACe,EAAE,CAAG,CAAC,CAAC,CAAG,IAAI,CACpD,KAAM,CAAAC,CAAC,CAAGX,IAAI,CAACY,KAAK,CAAC,CAAC,CAACC,cAAc,CAACL,KAAK,CAAC,CAC5C/B,GAAG,CAACyB,SAAS,KAAAC,MAAA,CAAOQ,CAAC,CAACP,YAAY,CAAC,CAAC,CAAE,CACtC3B,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAEC,CAAC,CAAEnB,CAAC,CAAE,EAAE,CAAC,CAC3B,CACF,CAAC,IAAM,IAAI1B,IAAI,GAAK,QAAQ,EAAIA,IAAI,GAAK,SAAS,CAAE,CAClD,IAAK,GAAI,CAAA6C,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGlB,CAAC,CAAEkB,CAAC,EAAI,EAAE,CAAE,CAC9B,KAAM,CAAAK,CAAC,CAAGX,IAAI,CAACY,KAAK,CAAC,CAAC,CAACE,SAAS,CAAC,CAAC,CAAE,CAAC,CAAE,CAACnB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,IAAI,CAAC,CACpEnB,GAAG,CAACyB,SAAS,KAAAC,MAAA,CAAOQ,CAAC,CAACP,YAAY,CAAC,CAAC,CAAE,CACtC3B,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAEC,CAAC,CAAEnB,CAAC,CAAE,EAAE,CAAC,CAC3B,CACAV,GAAG,CAACsC,WAAW,CAAG,IAAI,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACpE,CAAC,IAAM,IAAItD,IAAI,GAAK,OAAO,CAAE,CAC3BgB,GAAG,CAACyB,SAAS,CAAG,SAAS,CACzBzB,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAElB,CAAC,CAAEC,CAAC,CAAC,CACxBX,GAAG,CAACyB,SAAS,CAAG,SAAS,CACzB,IAAK,GAAI,CAAAT,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,EAAE,CAAEA,CAAC,EAAE,CAAE,CAC3B,KAAM,CAAAuB,CAAC,CAAGrB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGT,CAAC,CAC3B,KAAM,CAAAmB,CAAC,CAAGX,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGR,CAAC,CAC3B,KAAM,CAAA6B,CAAC,CAAG,CAAC,CAAGtB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,CAChCnB,GAAG,CAACyC,SAAS,CAAC,CAAC,CACfzC,GAAG,CAAC0C,OAAO,CAACH,CAAC,CAAEV,CAAC,CAAEW,CAAC,EAAI,GAAG,CAAGtB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAEqB,CAAC,CAAEtB,IAAI,CAACC,MAAM,CAAC,CAAC,CAACD,IAAI,CAACe,EAAE,CAAE,CAAC,CAAEf,IAAI,CAACe,EAAE,CAAC,CAAC,CAAC,CACxFjC,GAAG,CAAC2C,IAAI,CAAC,CAAC,CACZ,CACA3C,GAAG,CAACsC,WAAW,CAAG,IAAI,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACpE,CAAC,IAAM,IAAItD,IAAI,GAAK,OAAO,CAAE,CAC3B,IAAK,GAAI,CAAA6C,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGlB,CAAC,CAAEkB,CAAC,EAAI,EAAE,CAAE,CAC9B,KAAM,CAAAK,CAAC,CAAGX,IAAI,CAACY,KAAK,CAAC,CAAC,CAACE,SAAS,CAAC,CAAC,CAAE,CAAC,CAAE,CAACnB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,GAAG,CAAC,CACnEnB,GAAG,CAACyB,SAAS,KAAAC,MAAA,CAAOQ,CAAC,CAACP,YAAY,CAAC,CAAC,CAAE,CACtC3B,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAEC,CAAC,CAAEnB,CAAC,CAAE,EAAE,CAAC,CAC3B,CACAV,GAAG,CAACsC,WAAW,CAAG,GAAG,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACnE,CAAC,IAAM,IAAItD,IAAI,GAAK,MAAM,EAAIA,IAAI,GAAK,SAAS,CAAE,CAChD,IAAK,GAAI,CAAAgC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,IAAI,CAAEA,CAAC,EAAE,CAAE,CAC7B,KAAM,CAAAuB,CAAC,CAAGrB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGT,CAAC,CAC3B,KAAM,CAAAmB,CAAC,CAAGX,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGR,CAAC,CAC3B,KAAM,CAAA6B,CAAC,CAAGtB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,CAAC,CAAG,CAAC,CAC/B,KAAM,CAAAe,CAAC,CAAGX,IAAI,CAACY,KAAK,CAAC,CAAC,CAACE,SAAS,CAAC,CAAC,CAAE,CAAC,CAAE,CAACnB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,IAAI,CAAC,CACpEnB,GAAG,CAACyB,SAAS,KAAAC,MAAA,CAAOQ,CAAC,CAACP,YAAY,CAAC,CAAC,CAAE,CACtC3B,GAAG,CAACyC,SAAS,CAAC,CAAC,CACfzC,GAAG,CAAC4C,GAAG,CAACL,CAAC,CAAEV,CAAC,CAAEW,CAAC,CAAE,CAAC,CAAEtB,IAAI,CAACe,EAAE,CAAG,CAAC,CAAC,CAChCjC,GAAG,CAAC2C,IAAI,CAAC,CAAC,CACZ,CACA3C,GAAG,CAACsC,WAAW,CAAG,IAAI,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACpE,CACF,CAAC,CAAC,CACJ,CAEA,QAAS,CAAAO,iBAAiBA,CAAA,CAA2B,IAA1B,CAAAC,KAAK,CAAAtD,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,IAAE,CAAAuD,KAAK,CAAAvD,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CACjD,KAAM,CAAAN,IAAI,CAAG,IAAI,CACjB,MAAO,CAAAI,mBAAmB,CAACJ,IAAI,CAAEA,IAAI,CAAE,CAACc,GAAG,CAAEU,CAAC,CAAEC,CAAC,GAAK,CACpD,KAAM,CAAAqC,EAAE,CAAGtC,CAAC,CAAG,CAAC,CAAEuC,EAAE,CAAGtC,CAAC,CAAG,CAAC,CAAEuC,IAAI,CAAGhC,IAAI,CAACiC,GAAG,CAACH,EAAE,CAAEC,EAAE,CAAC,CACrD,KAAM,CAAAG,IAAI,CAAGpD,GAAG,CAACqD,oBAAoB,CAACL,EAAE,CAAEC,EAAE,CAAEH,KAAK,CAAGI,IAAI,CAAEF,EAAE,CAAEC,EAAE,CAAEF,KAAK,CAAGG,IAAI,CAAC,CACjFE,IAAI,CAACE,YAAY,CAAC,GAAG,CAAE,uBAAuB,CAAC,CAC/CF,IAAI,CAACE,YAAY,CAAC,GAAG,CAAE,wBAAwB,CAAC,CAChDF,IAAI,CAACE,YAAY,CAAC,GAAG,CAAE,wBAAwB,CAAC,CAChDF,IAAI,CAACE,YAAY,CAAC,GAAG,CAAE,uBAAuB,CAAC,CAC/CtD,GAAG,CAACyB,SAAS,CAAG2B,IAAI,CACpBpD,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAElB,CAAC,CAAEC,CAAC,CAAC,CAC1B,CAAC,CAAC,CACJ,CAEA;AACA;AACA;AACA,QAAS,CAAA4C,yBAAyBA,CAACC,SAAS,CAAE,CAC5C,KAAM,CAAAC,GAAG,CAAGD,SAAS,CAACE,KAAK,CAC3B,KAAM,CAAAhD,CAAC,CAAG+C,GAAG,CAAClE,KAAK,CAAEoB,CAAC,CAAG8C,GAAG,CAAC9D,MAAM,CACnC,KAAM,CAAAE,MAAM,CAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAC/CF,MAAM,CAACN,KAAK,CAAGmB,CAAC,CAAEb,MAAM,CAACF,MAAM,CAAGgB,CAAC,CACnC,KAAM,CAAAX,GAAG,CAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC,CACnCD,GAAG,CAAC2D,SAAS,CAACF,GAAG,CAAE,CAAC,CAAE,CAAC,CAAC,CACxB,KAAM,CAAA5C,GAAG,CAAGb,GAAG,CAACc,YAAY,CAAC,CAAC,CAAE,CAAC,CAAEJ,CAAC,CAAEC,CAAC,CAAC,CACxC,KAAM,CAAAI,IAAI,CAAGF,GAAG,CAACE,IAAI,CACrB,KAAM,CAAA6C,GAAG,CAAG5D,GAAG,CAAC6D,eAAe,CAACnD,CAAC,CAAEC,CAAC,CAAC,CACrC,KAAM,CAAAmD,EAAE,CAAGF,GAAG,CAAC7C,IAAI,CACnB,KAAM,CAAAgD,OAAO,CAAGA,CAACxB,CAAC,CAAEV,CAAC,GAAK,CACxBU,CAAC,CAAGrB,IAAI,CAAC8C,GAAG,CAAC,CAAC,CAAE9C,IAAI,CAACiC,GAAG,CAACzC,CAAC,CAAG,CAAC,CAAE6B,CAAC,CAAC,CAAC,CACnCV,CAAC,CAAGX,IAAI,CAAC8C,GAAG,CAAC,CAAC,CAAE9C,IAAI,CAACiC,GAAG,CAACxC,CAAC,CAAG,CAAC,CAAEkB,CAAC,CAAC,CAAC,CACnC,KAAM,CAAAb,CAAC,CAAG,CAACa,CAAC,CAAGnB,CAAC,CAAG6B,CAAC,EAAI,CAAC,CACzB,MAAO,CAAAxB,IAAI,CAACC,CAAC,CAAC,CAAG,GAAG,CAAE;AACxB,CAAC,CACD,KAAM,CAAAiD,QAAQ,CAAG,GAAG,CACpB,IAAK,GAAI,CAAApC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGlB,CAAC,CAAEkB,CAAC,EAAE,CAAE,CAC1B,IAAK,GAAI,CAAAU,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG7B,CAAC,CAAE6B,CAAC,EAAE,CAAE,CAC1B,KAAM,CAAA2B,EAAE,CAAGH,OAAO,CAACxB,CAAC,CAAG,CAAC,CAAEV,CAAC,CAAC,CAAGkC,OAAO,CAACxB,CAAC,CAAG,CAAC,CAAEV,CAAC,CAAC,CAChD,KAAM,CAAAsC,EAAE,CAAGJ,OAAO,CAACxB,CAAC,CAAEV,CAAC,CAAG,CAAC,CAAC,CAAGkC,OAAO,CAACxB,CAAC,CAAEV,CAAC,CAAG,CAAC,CAAC,CAChD,GAAI,CAAAuC,EAAE,CAAG,CAACF,EAAE,CAAGD,QAAQ,CAAEI,EAAE,CAAG,CAACF,EAAE,CAAGF,QAAQ,CAAEK,EAAE,CAAG,GAAG,CACtD,KAAM,CAAAC,GAAG,CAAGrD,IAAI,CAACsD,IAAI,CAACJ,EAAE,CAAGA,EAAE,CAAGC,EAAE,CAAGA,EAAE,CAAGC,EAAE,CAAGA,EAAE,CAAC,EAAI,CAAC,CACvDF,EAAE,EAAIG,GAAG,CAAEF,EAAE,EAAIE,GAAG,CAAED,EAAE,EAAIC,GAAG,CAC/B,KAAM,CAAAvD,CAAC,CAAG,CAACa,CAAC,CAAGnB,CAAC,CAAG6B,CAAC,EAAI,CAAC,CACzBuB,EAAE,CAAC9C,CAAC,CAAC,CAAGE,IAAI,CAACuD,KAAK,CAAC,CAACL,EAAE,CAAG,GAAG,CAAG,GAAG,EAAI,GAAG,CAAC,CAC1CN,EAAE,CAAC9C,CAAC,CAAG,CAAC,CAAC,CAAGE,IAAI,CAACuD,KAAK,CAAC,CAACJ,EAAE,CAAG,GAAG,CAAG,GAAG,EAAI,GAAG,CAAC,CAC9CP,EAAE,CAAC9C,CAAC,CAAG,CAAC,CAAC,CAAGE,IAAI,CAACuD,KAAK,CAAC,CAACH,EAAE,CAAG,GAAG,CAAG,GAAG,EAAI,GAAG,CAAC,CAC9CR,EAAE,CAAC9C,CAAC,CAAG,CAAC,CAAC,CAAG,GAAG,CACjB,CACF,CACAhB,GAAG,CAACoB,YAAY,CAACwC,GAAG,CAAE,CAAC,CAAE,CAAC,CAAC,CAC3B,KAAM,CAAAc,GAAG,CAAG,GAAI,CAAA/F,KAAK,CAACwB,aAAa,CAACN,MAAM,CAAC,CAC3C6E,GAAG,CAAClE,UAAU,CAAG,CAAC,CAClB,MAAO,CAAAkE,GAAG,CACZ,CAEA,QAAS,CAAAC,0BAA0BA,CAAC3F,IAAI,CAAEsC,OAAO,CAAE,CACjD,KAAM,CAAA/B,KAAK,CAAG,IAAI,CAAEI,MAAM,CAAG,IAAI,CAAE;AACnC;AACA,KAAM,CAAAiF,QAAQ,CAAGvD,mBAAmB,CAACrC,IAAI,CAAEsC,OAAO,CAAC,CACnD;AACA,KAAM,CAAAkC,SAAS,CAAGlE,mBAAmB,CAACC,KAAK,CAAEI,MAAM,CAAE,CAACK,GAAG,CAAEU,CAAC,CAAEC,CAAC,GAAK,CAClEX,GAAG,CAACyB,SAAS,CAAG,kBAAkB,CAClCzB,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAElB,CAAC,CAAEC,CAAC,CAAC,CACxB,GAAI3B,IAAI,GAAK,OAAO,CAAE,CACpB;AACAgB,GAAG,CAACsC,WAAW,CAAG,CAAC,CACnBtC,GAAG,CAACyB,SAAS,CAAG,kBAAkB,CAClC,IAAK,GAAI,CAAAT,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,IAAI,CAAEA,CAAC,EAAE,CAAE,CAC7B,KAAM,CAAAuB,CAAC,CAAGrB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGT,CAAC,CAAEmB,CAAC,CAAGX,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGR,CAAC,CAClD,KAAM,CAAAkE,EAAE,CAAG,EAAE,CAAG3D,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,CAAE2D,EAAE,CAAG,CAAC,CAAG5D,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,CAC/DnB,GAAG,CAACyC,SAAS,CAAC,CAAC,CACfzC,GAAG,CAAC0C,OAAO,CAACH,CAAC,CAAEV,CAAC,CAAEgD,EAAE,CAAEC,EAAE,CAAE5D,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGD,IAAI,CAACe,EAAE,CAAE,CAAC,CAAEf,IAAI,CAACe,EAAE,CAAG,CAAC,CAAC,CAClEjC,GAAG,CAAC2C,IAAI,CAAC,CAAC,CACZ,CACA3C,GAAG,CAACsC,WAAW,CAAG,IAAI,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACpE,CAAC,IAAM,IAAItD,IAAI,GAAK,MAAM,EAAIA,IAAI,GAAK,SAAS,CAAE,CAChD;AACAgB,GAAG,CAACyB,SAAS,CAAG,kBAAkB,CAClC,IAAK,GAAI,CAAAT,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,IAAI,CAAEA,CAAC,EAAE,CAAE,CAC7B,KAAM,CAAAuB,CAAC,CAAGrB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGT,CAAC,CAAEmB,CAAC,CAAGX,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGR,CAAC,CAAE6B,CAAC,CAAGtB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,CAAC,CAAG,CAAC,CAC7EnB,GAAG,CAACyC,SAAS,CAAC,CAAC,CAAEzC,GAAG,CAAC4C,GAAG,CAACL,CAAC,CAAEV,CAAC,CAAEW,CAAC,CAAE,CAAC,CAAEtB,IAAI,CAACe,EAAE,CAAG,CAAC,CAAC,CAAEjC,GAAG,CAAC2C,IAAI,CAAC,CAAC,CAC/D,CACA3C,GAAG,CAACsC,WAAW,CAAG,GAAG,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACnE,CAAC,IAAM,IAAItD,IAAI,GAAK,SAAS,EAAIA,IAAI,GAAK,QAAQ,EAAIA,IAAI,GAAK,QAAQ,EAAIA,IAAI,GAAK,SAAS,CAAE,CAC7F;AACA,IAAK,GAAI,CAAA6C,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGlB,CAAC,CAAEkB,CAAC,EAAI,CAAC,CAAE,CAC7B,KAAM,CAAAkD,IAAI,CAAG,GAAG,CAAG7D,IAAI,CAAC8D,KAAK,CAAC9D,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CACjDnB,GAAG,CAACyB,SAAS,QAAAC,MAAA,CAAUqD,IAAI,MAAArD,MAAA,CAAIqD,IAAI,MAAArD,MAAA,CAAIqD,IAAI,KAAG,CAC9C/E,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAEC,CAAC,CAAEnB,CAAC,CAAE,CAAC,CAAC,CAC1B,CACAV,GAAG,CAACsC,WAAW,CAAG,GAAG,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACnE,CACF,CAAC,CAAC,CACF,KAAM,CAAA2C,SAAS,CAAG1B,yBAAyB,CAACC,SAAS,CAAC,CACtD,MAAO,CAAEoB,QAAQ,CAAEK,SAAU,CAAC,CAChC,CAEA;AACA;AACA;AACA,MAAO,SAAS,CAAAC,SAASA,CAAA,CAAG,CAC1B;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAxG,KAAK,CAACyG,KAAK,CAAC,CAAC,CAClCD,QAAQ,CAACE,QAAQ,CAACC,KAAK,CAAG,IAAI,CAE9B;AACA,KAAM,CAAAC,OAAO,CAAGjG,mBAAmB,CAAC,IAAI,CAAE,IAAI,CAAE,CAACU,GAAG,CAAEU,CAAC,CAAEC,CAAC,GAAK,CAC7D,KAAM,CAAAyC,IAAI,CAAGpD,GAAG,CAACwF,oBAAoB,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE7E,CAAC,CAAC,CACjDyC,IAAI,CAACE,YAAY,CAAC,CAAC,CAAE,SAAS,CAAC,CAC/BF,IAAI,CAACE,YAAY,CAAC,GAAG,CAAE,SAAS,CAAC,CACjCF,IAAI,CAACE,YAAY,CAAC,CAAC,CAAE,SAAS,CAAC,CAC/BtD,GAAG,CAACyB,SAAS,CAAG2B,IAAI,CACpBpD,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAElB,CAAC,CAAEC,CAAC,CAAC,CACxBX,GAAG,CAACsC,WAAW,CAAG,IAAI,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACpE,CAAC,CAAC,CAEF,KAAM,CAAAmD,OAAO,CAAG,GAAI,CAAA9G,KAAK,CAAC+G,cAAc,CAAC,EAAE,CAAE,GAAG,CAAE,GAAG,CAAC,CACtD,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAhH,KAAK,CAACiH,oBAAoB,CAAC,CAC7CC,GAAG,CAAEN,OAAO,CACZpG,KAAK,CAAE,QAAQ,CACf2G,QAAQ,CAAE,GAAI,CAAAnH,KAAK,CAAC6C,KAAK,CAAC,QAAQ,CAAC,CACnCuE,WAAW,CAAER,OAAO,CACpBS,iBAAiB,CAAE,GAAG,CACtBC,SAAS,CAAE,GAAG,CACdC,SAAS,CAAE,GACb,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAxH,KAAK,CAACyH,IAAI,CAACX,OAAO,CAAEE,OAAO,CAAC,CAC7CQ,IAAI,CAACE,KAAK,CAACC,GAAG,CAACxH,SAAS,CAAEA,SAAS,CAAEA,SAAS,CAAC,CAC/CqG,QAAQ,CAACoB,GAAG,CAACJ,IAAI,CAAC,CAElB;AACA,KAAM,CAAAK,OAAO,CAAGlH,mBAAmB,CAAC,IAAI,CAAE,IAAI,CAAE,CAACU,GAAG,CAAEU,CAAC,CAAEC,CAAC,GAAK,CAC7D,KAAM,CAAAqC,EAAE,CAAGtC,CAAC,CAAC,CAAC,CAAEuC,EAAE,CAAGtC,CAAC,CAAC,CAAC,CAAE6B,CAAC,CAAGtB,IAAI,CAACiC,GAAG,CAACH,EAAE,CAAEC,EAAE,CAAC,CAC9C,KAAM,CAAAwD,CAAC,CAAGzG,GAAG,CAACqD,oBAAoB,CAACL,EAAE,CAAEC,EAAE,CAAET,CAAC,CAAC,GAAG,CAAEQ,EAAE,CAAEC,EAAE,CAAET,CAAC,CAAC,CAC5DiE,CAAC,CAACnD,YAAY,CAAC,GAAG,CAAE,uBAAuB,CAAC,CAC5CmD,CAAC,CAACnD,YAAY,CAAC,GAAG,CAAE,uBAAuB,CAAC,CAC5CmD,CAAC,CAACnD,YAAY,CAAC,GAAG,CAAE,sBAAsB,CAAC,CAC3CtD,GAAG,CAACyB,SAAS,CAAGgF,CAAC,CACjBzG,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAElB,CAAC,CAAEC,CAAC,CAAC,CAC1B,CAAC,CAAC,CACF,KAAM,CAAA+F,OAAO,CAAG,GAAI,CAAA/H,KAAK,CAACgI,cAAc,CAAC,CAAEd,GAAG,CAAEW,OAAO,CAAErH,KAAK,CAAE,QAAQ,CAAEyH,WAAW,CAAE,IAAI,CAAEC,UAAU,CAAE,KAAK,CAAEC,QAAQ,CAAEnI,KAAK,CAACoI,gBAAiB,CAAC,CAAC,CACnJ,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAArI,KAAK,CAACsI,MAAM,CAACP,OAAO,CAAC,CACtC,KAAM,CAAAQ,SAAS,CAAG,GAAG,CAAGpI,SAAS,CAAG,EAAE,CAAE;AACxCkI,IAAI,CAACX,KAAK,CAACC,GAAG,CAACY,SAAS,CAAEA,SAAS,CAAE,CAAC,CAAC,CACvC/B,QAAQ,CAACoB,GAAG,CAACS,IAAI,CAAC,CAElB;AACA,KAAM,CAAAG,QAAQ,CAAG,GAAI,CAAAxI,KAAK,CAACyI,iBAAiB,CAAC,CAAEjI,KAAK,CAAE,QAAQ,CAAEyH,WAAW,CAAE,IAAI,CAAES,OAAO,CAAE,IAAI,CAAEP,QAAQ,CAAEnI,KAAK,CAACoI,gBAAiB,CAAC,CAAC,CACrI,KAAM,CAAAO,MAAM,CAAG,GAAI,CAAA3I,KAAK,CAACyH,IAAI,CAAC,GAAI,CAAAzH,KAAK,CAAC4I,aAAa,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC,CAAE,EAAE,CAAC,CAAEJ,QAAQ,CAAC,CACnF,KAAM,CAAAK,MAAM,CAAG,GAAI,CAAA7I,KAAK,CAACyH,IAAI,CAAC,GAAI,CAAAzH,KAAK,CAAC4I,aAAa,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC,CAAE,EAAE,CAAC,CAAEJ,QAAQ,CAAC,CACnFG,MAAM,CAACG,QAAQ,CAAClF,CAAC,CAAGrB,IAAI,CAACe,EAAE,CAAG,CAAC,CAAEqF,MAAM,CAACG,QAAQ,CAAC5F,CAAC,CAAGX,IAAI,CAACe,EAAE,CAAG,CAAC,CAChEuF,MAAM,CAACC,QAAQ,CAAClF,CAAC,CAAG,CAACrB,IAAI,CAACe,EAAE,CAAG,CAAC,CAAEuF,MAAM,CAACC,QAAQ,CAAC5F,CAAC,CAAGX,IAAI,CAACe,EAAE,CAAG,CAAC,CACjEqF,MAAM,CAACjB,KAAK,CAACC,GAAG,CAACxH,SAAS,CAAEA,SAAS,CAAEA,SAAS,CAAC,CACjD0I,MAAM,CAACnB,KAAK,CAACC,GAAG,CAACxH,SAAS,CAAEA,SAAS,CAAEA,SAAS,CAAC,CACjDqG,QAAQ,CAACoB,GAAG,CAACe,MAAM,CAAC,CACpBnC,QAAQ,CAACoB,GAAG,CAACiB,MAAM,CAAC,CAEpB,MAAO,CAAArC,QAAQ,CACjB,CAEA;AACA;AACA;AACA,MAAO,SAAS,CAAAuC,aAAaA,CAACC,KAAK,CAAEC,WAAW,CAAE,CAChD,MAAO,CAAA7I,kBAAkB,CAAC8G,GAAG,CAACgC,CAAC,EAAI,KAAAC,mBAAA,CACjC,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAApJ,KAAK,CAAC+G,cAAc,CAACmC,CAAC,CAAC3I,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACpD,GAAI,CAAA8I,GAAG,CACP,KAAM,CAAEpD,QAAQ,CAAEK,SAAU,CAAC,CAAGN,0BAA0B,CAACkD,CAAC,CAAC7I,IAAI,CAAE6I,CAAC,CAAC1I,KAAK,CAAC,CAC3E;AACA,GAAI,CAAA2G,QAAQ,CAAGpG,SAAS,CAAEsG,iBAAiB,CAAG,GAAG,CACjD,GAAI6B,CAAC,CAAC7I,IAAI,GAAK,OAAO,CAAE,CACtB8G,QAAQ,CAAG,GAAI,CAAAnH,KAAK,CAAC6C,KAAK,CAAC,QAAQ,CAAC,CACpCwE,iBAAiB,CAAG,IAAI,CAC1B,CACAgC,GAAG,CAAG,GAAI,CAAArJ,KAAK,CAACiH,oBAAoB,CAAC,CACnCC,GAAG,CAAEjB,QAAQ,CACbqD,SAAS,CAAEhD,SAAS,CACpBiD,WAAW,CAAE,GAAI,CAAAvJ,KAAK,CAACwJ,OAAO,CAAC,GAAG,CAAE,GAAG,CAAC,CACxCjC,SAAS,CAAE,GAAG,CACdD,SAAS,CAAE,GAAG,CACdH,QAAQ,CACRE,iBACF,CAAC,CAAC,CACF,KAAM,CAAAoC,IAAI,CAAG,GAAI,CAAAzJ,KAAK,CAACyH,IAAI,CAAC2B,GAAG,CAAEC,GAAG,CAAC,CAErC;AACA,KAAM,CAAAK,KAAK,CAAG,CAAEC,OAAO,CAAE,IAAI,CAAEC,KAAK,CAAE,GAAG,CAAGrH,IAAI,CAACe,EAAE,CAAC,GAAG,CAAEuG,KAAK,CAAE,IAAI,CAAGtH,IAAI,CAACe,EAAE,CAAC,GAAG,CAAEwG,IAAI,CAAE,EAAE,CAAGvH,IAAI,CAACe,EAAE,CAAC,GAAG,CAAEyG,OAAO,CAAE,CAAC,CAAGxH,IAAI,CAACe,EAAE,CAAC,GAAG,CAAE0G,MAAM,CAAE,EAAE,CAAGzH,IAAI,CAACe,EAAE,CAAC,GAAG,CAAE2G,MAAM,CAAE,EAAE,CAAG1H,IAAI,CAACe,EAAE,CAAC,GAAG,CAAE4G,OAAO,CAAE,EAAE,CAAG3H,IAAI,CAACe,EAAE,CAAC,GAAI,CAAC,CACrNmG,IAAI,CAACX,QAAQ,CAACqB,CAAC,CAAGT,KAAK,CAACR,CAAC,CAAC7I,IAAI,CAAC,EAAI,CAAC,CAEpC;AACA,GAAI6I,CAAC,CAACxI,IAAI,CAAE,CACV,KAAM,CAAAyD,KAAK,CAAG+E,CAAC,CAAC3I,IAAI,CAAG,GAAG,CAC1B,KAAM,CAAA6D,KAAK,CAAG8E,CAAC,CAAC3I,IAAI,CAAG,GAAG,CAC1B,KAAM,CAAA6J,OAAO,CAAG,GAAI,CAAApK,KAAK,CAACqK,YAAY,CAAClG,KAAK,CAAEC,KAAK,CAAE,GAAG,CAAC,CACzD,KAAM,CAAAkG,OAAO,CAAGpG,iBAAiB,CAACC,KAAK,CAACC,KAAK,CAAG,GAAG,CAAE,GAAG,CAAC,CACzDkG,OAAO,CAAC7I,KAAK,CAAGzB,KAAK,CAAC0B,cAAc,CACpC4I,OAAO,CAAC3I,KAAK,CAAG3B,KAAK,CAAC0B,cAAc,CACpC,KAAM,CAAA6I,OAAO,CAAG,GAAI,CAAAvK,KAAK,CAACyI,iBAAiB,CAAC,CAAEvB,GAAG,CAAEoD,OAAO,CAAEE,IAAI,CAAExK,KAAK,CAACyK,UAAU,CAAExC,WAAW,CAAE,IAAI,CAAES,OAAO,CAAE,GAAI,CAAC,CAAC,CACtH,KAAM,CAAAhI,IAAI,CAAG,GAAI,CAAAV,KAAK,CAACyH,IAAI,CAAC2C,OAAO,CAAEG,OAAO,CAAC,CAC7C7J,IAAI,CAACoI,QAAQ,CAAClF,CAAC,CAAG,CAACrB,IAAI,CAACe,EAAE,CAAG,CAAC,CAC9B5C,IAAI,CAACgG,QAAQ,CAACgE,MAAM,CAAG,IAAI,CAC3BjB,IAAI,CAAC7B,GAAG,CAAClH,IAAI,CAAC,CAChB,CAEA;AACA,GAAIwI,CAAC,CAAC7I,IAAI,GAAK,OAAO,CAAE,CACtB,KAAM,CAAAsK,SAAS,CAAG,GAAI,CAAA3K,KAAK,CAAC+G,cAAc,CAACmC,CAAC,CAAC3I,IAAI,CAAG,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACjE,KAAM,CAAAqK,SAAS,CAAGjK,mBAAmB,CAAC,IAAI,CAAE,GAAG,CAAE,CAACU,GAAG,CAAEU,CAAC,CAAEC,CAAC,GAAK,CAC9DX,GAAG,CAACyB,SAAS,CAAG,qBAAqB,CACrCzB,GAAG,CAAC4B,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAElB,CAAC,CAAEC,CAAC,CAAC,CACxBX,GAAG,CAACyB,SAAS,CAAG,wBAAwB,CACxC,IAAK,GAAI,CAAAT,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,GAAG,CAAEA,CAAC,EAAE,CAAE,CAC5B,KAAM,CAAAuB,CAAC,CAAGrB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGT,CAAC,CAC3B,KAAM,CAAAmB,CAAC,CAAGX,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGR,CAAC,CAC3B,KAAM,CAAAkE,EAAE,CAAG,EAAE,CAAG3D,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CACnC,KAAM,CAAA2D,EAAE,CAAG,EAAE,CAAG5D,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,CAClCnB,GAAG,CAACyC,SAAS,CAAC,CAAC,CACfzC,GAAG,CAAC0C,OAAO,CAACH,CAAC,CAAEV,CAAC,CAAEgD,EAAE,CAAEC,EAAE,CAAE5D,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGD,IAAI,CAACe,EAAE,CAAE,CAAC,CAAEf,IAAI,CAACe,EAAE,CAAG,CAAC,CAAC,CAClEjC,GAAG,CAAC2C,IAAI,CAAC,CAAC,CACZ,CACA3C,GAAG,CAACsC,WAAW,CAAG,IAAI,CAAE7B,KAAK,CAACT,GAAG,CAAEU,CAAC,CAAEC,CAAC,CAAE,GAAG,CAAC,CAAEX,GAAG,CAACsC,WAAW,CAAG,CAAC,CACpE,CAAC,CAAC,CACF,KAAM,CAAAkH,SAAS,CAAG,GAAI,CAAA7K,KAAK,CAACiH,oBAAoB,CAAC,CAAEC,GAAG,CAAE0D,SAAS,CAAE3C,WAAW,CAAE,IAAI,CAAES,OAAO,CAAE,IAAI,CAAER,UAAU,CAAE,KAAM,CAAC,CAAC,CACzH,KAAM,CAAA4C,MAAM,CAAG,GAAI,CAAA9K,KAAK,CAACyH,IAAI,CAACkD,SAAS,CAAEE,SAAS,CAAC,CACnDC,MAAM,CAACpE,QAAQ,CAACqE,QAAQ,CAAG,IAAI,CAC/BtB,IAAI,CAAC7B,GAAG,CAACkD,MAAM,CAAC,CAEhB;AACA,KAAM,CAAAE,aAAa,CAAG,GAAI,CAAAhL,KAAK,CAAC+G,cAAc,CAACmC,CAAC,CAAC3I,IAAI,CAAG,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACrE,KAAM,CAAA0K,aAAa,CAAG,GAAI,CAAAjL,KAAK,CAACyI,iBAAiB,CAAC,CAAEjI,KAAK,CAAE,QAAQ,CAAEyH,WAAW,CAAE,IAAI,CAAES,OAAO,CAAE,IAAK,CAAC,CAAC,CACxG,KAAM,CAAAwC,UAAU,CAAG,GAAI,CAAAlL,KAAK,CAACyH,IAAI,CAACuD,aAAa,CAAEC,aAAa,CAAC,CAC/DC,UAAU,CAACxE,QAAQ,CAACyE,YAAY,CAAG,IAAI,CACvC1B,IAAI,CAAC7B,GAAG,CAACsD,UAAU,CAAC,CACtB,CAGAzB,IAAI,CAAC/C,QAAQ,CAAC0E,QAAQ,CAAG,IAAI,CAC7BpC,KAAK,CAACpB,GAAG,CAAC6B,IAAI,CAAC,CAEf;AACA,GAAIR,WAAW,CAAE,CACf,KAAM,CAAAoC,QAAQ,CAAGlK,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAC9CiK,QAAQ,CAACC,SAAS,CAAG,OAAO,CAC5BD,QAAQ,CAACE,WAAW,CAAGrC,CAAC,CAAC7I,IAAI,CAC7BgL,QAAQ,CAACG,KAAK,CAAChL,KAAK,CAAG,OAAO,CAC9B6K,QAAQ,CAACG,KAAK,CAACC,QAAQ,CAAG,MAAM,CAChCJ,QAAQ,CAACG,KAAK,CAACE,UAAU,CAAG,OAAO,CACnCL,QAAQ,CAACG,KAAK,CAACG,aAAa,CAAG,MAAM,CACrC,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAA3C,WAAW,CAACoC,QAAQ,CAAC,CACvCO,KAAK,CAACC,QAAQ,CAAClE,GAAG,CAAC,CAAC,CAAEuB,CAAC,CAAC3I,IAAI,CAAG,EAAE,CAAE,CAAC,CAAC,CACrCkJ,IAAI,CAAC7B,GAAG,CAACgE,KAAK,CAAC,CACjB,CAEA;AACA,KAAM,CAAAE,QAAQ,CAAG,GAAG,CACpB,KAAM,CAAAC,cAAc,CAAG,EAAE,CACzB,IAAK,GAAI,CAAA1J,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIyJ,QAAQ,CAAEzJ,CAAC,EAAE,CAAE,CAClC,KAAM,CAAA2J,KAAK,CAAI3J,CAAC,CAAGyJ,QAAQ,CAAI,CAAC,CAAGvJ,IAAI,CAACe,EAAE,CAC1CyI,cAAc,CAACE,IAAI,CAAC/C,CAAC,CAAC5I,MAAM,CAAGiC,IAAI,CAAC2J,GAAG,CAACF,KAAK,CAAC,CAAE,CAAC,CAAE9C,CAAC,CAAC5I,MAAM,CAAGiC,IAAI,CAACc,GAAG,CAAC2I,KAAK,CAAC,CAAC,CAChF,CACA,KAAM,CAAAG,QAAQ,CAAG,GAAI,CAAAnM,KAAK,CAACoM,cAAc,CAAC,CAAC,CAC3CD,QAAQ,CAACE,YAAY,CAAC,UAAU,CAAE,GAAI,CAAArM,KAAK,CAACsM,sBAAsB,CAACP,cAAc,CAAE,CAAC,CAAC,CAAC,CACtF,KAAM,CAAAQ,QAAQ,CAAG,GAAI,CAAAvM,KAAK,CAACwM,iBAAiB,CAAC,CAAEhM,KAAK,CAAE,QAAQ,CAAEyH,WAAW,CAAE,IAAI,CAAES,OAAO,CAAE,GAAI,CAAC,CAAC,CAClG,KAAM,CAAA+D,SAAS,CAAG,GAAI,CAAAzM,KAAK,CAAC0M,QAAQ,CAACP,QAAQ,CAAEI,QAAQ,CAAC,CACxDE,SAAS,CAAC/F,QAAQ,CAACiG,OAAO,CAAG,IAAI,CACjC3D,KAAK,CAACpB,GAAG,CAAC6E,SAAS,CAAC,CAEpB,KAAM,CAAAG,YAAY,CAAG,IAAI,CACzB,KAAM,CAAAC,WAAW,CAAG,CAAElD,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,CAAC,KAAK,CAAEC,KAAK,CAAE,IAAI,CAAEC,IAAI,CAAE,KAAK,CAAEC,OAAO,CAAE,IAAI,CAAEC,MAAM,CAAE,IAAI,CAAEC,MAAM,CAAE,CAAC,IAAI,CAAEC,OAAO,CAAE,IAAK,CAAC,CAC1I,KAAM,CAAA4C,aAAa,EAAA3D,mBAAA,CAAG0D,WAAW,CAAC3D,CAAC,CAAC7I,IAAI,CAAC,UAAA8I,mBAAA,UAAAA,mBAAA,CAAIyD,YAAY,CACzD,OAAAG,aAAA,CAAAA,aAAA,IAAY7D,CAAC,MAAEO,IAAI,CAAEuD,KAAK,CAAEzK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGD,IAAI,CAACe,EAAE,CAAG,CAAC,CAAEwJ,aAAa,GACxE,CAAC,CAAC,CACJ,CAEA;AACA;AACA;AACA,MAAO,SAAS,CAAAG,qBAAqBA,CAACC,OAAO,CAAE,CAC7CA,OAAO,CAACC,OAAO,CAACjE,CAAC,EAAI,CACnBA,CAAC,CAAC8D,KAAK,EAAI9D,CAAC,CAACzI,KAAK,CAClByI,CAAC,CAACO,IAAI,CAACoC,QAAQ,CAACjI,CAAC,CAAGsF,CAAC,CAAC5I,MAAM,CAAGiC,IAAI,CAAC2J,GAAG,CAAChD,CAAC,CAAC8D,KAAK,CAAC,CAChD9D,CAAC,CAACO,IAAI,CAACoC,QAAQ,CAAC1B,CAAC,CAAGjB,CAAC,CAAC5I,MAAM,CAAGiC,IAAI,CAACc,GAAG,CAAC6F,CAAC,CAAC8D,KAAK,CAAC,CAChD,GAAI9D,CAAC,CAAC4D,aAAa,CAAE,CACnB5D,CAAC,CAACO,IAAI,CAACX,QAAQ,CAAC5F,CAAC,EAAIgG,CAAC,CAAC4D,aAAa,CACpC,KAAM,CAAAhC,MAAM,CAAG5B,CAAC,CAACO,IAAI,CAAC2D,QAAQ,EAAIlE,CAAC,CAACO,IAAI,CAAC2D,QAAQ,CAACC,IAAI,CAAC9J,CAAC,EAAIA,CAAC,CAACmD,QAAQ,EAAInD,CAAC,CAACmD,QAAQ,CAACqE,QAAQ,CAAC,CAC9F,GAAID,MAAM,CAAEA,MAAM,CAAChC,QAAQ,CAAC5F,CAAC,EAAIgG,CAAC,CAAC4D,aAAa,CAAG,GAAG,CACxD,CACF,CAAC,CAAC,CACJ,CAEA;AACA;AACA;AACA,MAAO,SAAS,CAAAQ,cAAcA,CAAA,CAAkB,IAAjB,CAAAC,QAAQ,CAAA1M,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC5C,KAAM,CAAA2M,QAAQ,CAAG,GAAI,CAAAxN,KAAK,CAACoM,cAAc,CAAC,CAAC,CAC3C,KAAM,CAAAqB,SAAS,CAAG,GAAI,CAAAC,YAAY,CAACH,QAAQ,CAAG,CAAC,CAAC,CAChD,KAAM,CAAAI,MAAM,CAAG,GAAI,CAAAD,YAAY,CAACH,QAAQ,CAAG,CAAC,CAAC,CAC7C,KAAM,CAAA/M,KAAK,CAAG,GAAI,CAAAR,KAAK,CAAC6C,KAAK,CAAC,CAAC,CAE/B,IAAK,GAAI,CAAAR,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGkL,QAAQ,CAAElL,CAAC,EAAE,CAAE,CACjC,KAAM,CAAAuL,MAAM,CAAGvL,CAAC,CAAG,CAAC,CACpB,KAAM,CAAA/B,MAAM,CAAGiC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAClC,KAAM,CAAAwK,KAAK,CAAG1M,MAAM,CAAG,GAAG,CAAGsN,MAAM,CAAGrL,IAAI,CAACe,EAAE,CAAG,CAAC,CACjD,KAAM,CAAAuK,MAAM,CAAG,CAACtL,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,EAAE,CAEzCiL,SAAS,CAACpL,CAAC,CAAG,CAAC,CAAC,CAAG/B,MAAM,CAAGiC,IAAI,CAAC2J,GAAG,CAACc,KAAK,CAAC,CAAGa,MAAM,CACpDJ,SAAS,CAACpL,CAAC,CAAG,CAAC,CAAG,CAAC,CAAC,CAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,EAAE,CACjDiL,SAAS,CAACpL,CAAC,CAAG,CAAC,CAAG,CAAC,CAAC,CAAG/B,MAAM,CAAGiC,IAAI,CAACc,GAAG,CAAC2J,KAAK,CAAC,CAAGa,MAAM,CAExD,KAAM,CAAAtK,CAAC,CAAGhB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,GAAG,CACnChC,KAAK,CAACsN,MAAM,CAACvK,CAAC,CAAEA,CAAC,CAAEA,CAAC,CAAC,CACrBoK,MAAM,CAACtL,CAAC,CAAG,CAAC,CAAC,CAAG7B,KAAK,CAACqD,CAAC,CACvB8J,MAAM,CAACtL,CAAC,CAAG,CAAC,CAAG,CAAC,CAAC,CAAG7B,KAAK,CAACsH,CAAC,CAC3B6F,MAAM,CAACtL,CAAC,CAAG,CAAC,CAAG,CAAC,CAAC,CAAG7B,KAAK,CAACuN,CAAC,CAC7B,CAEAP,QAAQ,CAACnB,YAAY,CAAC,UAAU,CAAE,GAAI,CAAArM,KAAK,CAACgO,eAAe,CAACP,SAAS,CAAE,CAAC,CAAC,CAAC,CAC1ED,QAAQ,CAACnB,YAAY,CAAC,OAAO,CAAE,GAAI,CAAArM,KAAK,CAACgO,eAAe,CAACL,MAAM,CAAE,CAAC,CAAC,CAAC,CAEpE,MAAO,IAAI,CAAA3N,KAAK,CAACiO,MAAM,CACrBT,QAAQ,CACR,GAAI,CAAAxN,KAAK,CAACkO,cAAc,CAAC,CAAE3N,IAAI,CAAE,CAAC,CAAE4N,YAAY,CAAE,IAAK,CAAC,CAC1D,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}