{"ast":null,"code":"import * as THREE from \"three\";\n\n// 태양계 행성 데이터\nexport const solarSystemPlanets = [{\n  name: \"Mercury\",\n  radius: 60,\n  size: 3,\n  color: 0x888888,\n  speed: 0.02\n}, {\n  name: \"Venus\",\n  radius: 90,\n  size: 6,\n  color: 0xffa500,\n  speed: 0.015\n}, {\n  name: \"Earth\",\n  radius: 120,\n  size: 7,\n  color: 0x00bfff,\n  speed: 0.01\n}, {\n  name: \"Mars\",\n  radius: 150,\n  size: 5,\n  color: 0xff0000,\n  speed: 0.008\n}, {\n  name: \"Jupiter\",\n  radius: 190,\n  size: 12,\n  color: 0x8b4513,\n  speed: 0.005\n}, {\n  name: \"Saturn\",\n  radius: 230,\n  size: 10,\n  color: 0xdaa520,\n  speed: 0.004,\n  ring: true\n}, {\n  name: \"Uranus\",\n  radius: 270,\n  size: 9,\n  color: 0xadd8e6,\n  speed: 0.003\n}, {\n  name: \"Neptune\",\n  radius: 310,\n  size: 9,\n  color: 0x00008b,\n  speed: 0.0025\n}];\n\n// 태양 생성\nexport function createSun() {\n  const geo = new THREE.SphereGeometry(50, 32, 32);\n  const mat = new THREE.MeshStandardMaterial({\n    color: 0xffff00,\n    emissive: 0xffff33,\n    emissiveIntensity: 1,\n    metalness: 0,\n    roughness: 0.4\n  });\n  const mesh = new THREE.Mesh(geo, mat);\n  mesh.userData.isSun = true;\n  return mesh;\n}\n\n// 행성 생성\nexport function createPlanets(scene) {\n  return solarSystemPlanets.map(p => {\n    const geo = new THREE.SphereGeometry(p.size, 32, 32);\n    const mat = new THREE.MeshStandardMaterial({\n      color: p.color,\n      metalness: 0,\n      roughness: 0.4\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 토성 고리\n    if (p.ring) {\n      const ringGeo = new THREE.RingGeometry(p.size + 2, p.size + 6, 64);\n      const ringMat = new THREE.MeshBasicMaterial({\n        color: 0xd2b48c,\n        side: THREE.DoubleSide\n      });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      mesh.add(ring);\n    }\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 궤도\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = i / segments * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({\n      color: 0xffffff,\n      transparent: true,\n      opacity: 0.2\n    });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n    return {\n      ...p,\n      mesh,\n      angle: Math.random() * Math.PI * 2\n    };\n  });\n}\n\n// 행성 위치 업데이트\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n  });\n}\n\n// 은하 생성\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n  return new THREE.Points(geometry, new THREE.PointsMaterial({\n    size: 2,\n    vertexColors: true\n  }));\n}","map":{"version":3,"names":["THREE","solarSystemPlanets","name","radius","size","color","speed","ring","createSun","geo","SphereGeometry","mat","MeshStandardMaterial","emissive","emissiveIntensity","metalness","roughness","mesh","Mesh","userData","isSun","createPlanets","scene","map","p","ringGeo","RingGeometry","ringMat","MeshBasicMaterial","side","DoubleSide","rotation","x","Math","PI","add","isPlanet","segments","orbitPositions","i","theta","push","cos","sin","orbitGeo","BufferGeometry","setAttribute","Float32BufferAttribute","orbitMat","LineBasicMaterial","transparent","opacity","orbitLine","LineLoop","isOrbit","angle","random","updatePlanetPositions","planets","forEach","position","z","generateGalaxy","numStars","geometry","positions","Float32Array","colors","Color","branch","spread","c","setRGB","r","g","b","BufferAttribute","Points","PointsMaterial","vertexColors"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/utils/solarSystem.js"],"sourcesContent":["import * as THREE from \"three\";\n\n// 태양계 행성 데이터\nexport const solarSystemPlanets = [\n  { name: \"Mercury\", radius: 60, size: 3, color: 0x888888, speed: 0.02 },\n  { name: \"Venus\", radius: 90, size: 6, color: 0xffa500, speed: 0.015 },\n  { name: \"Earth\", radius: 120, size: 7, color: 0x00bfff, speed: 0.01 },\n  { name: \"Mars\", radius: 150, size: 5, color: 0xff0000, speed: 0.008 },\n  { name: \"Jupiter\", radius: 190, size: 12, color: 0x8b4513, speed: 0.005 },\n  { name: \"Saturn\", radius: 230, size: 10, color: 0xdaa520, speed: 0.004, ring: true },\n  { name: \"Uranus\", radius: 270, size: 9, color: 0xadd8e6, speed: 0.003 },\n  { name: \"Neptune\", radius: 310, size: 9, color: 0x00008b, speed: 0.0025 },\n];\n\n// 태양 생성\nexport function createSun() {\n  const geo = new THREE.SphereGeometry(50, 32, 32);\n  const mat = new THREE.MeshStandardMaterial({\n    color: 0xffff00,\n    emissive: 0xffff33,\n    emissiveIntensity: 1,\n    metalness: 0,\n    roughness: 0.4,\n  });\n  const mesh = new THREE.Mesh(geo, mat);\n  mesh.userData.isSun = true;\n  return mesh;\n}\n\n// 행성 생성\nexport function createPlanets(scene) {\n  return solarSystemPlanets.map(p => {\n    const geo = new THREE.SphereGeometry(p.size, 32, 32);\n    const mat = new THREE.MeshStandardMaterial({\n      color: p.color,\n      metalness: 0,\n      roughness: 0.4,\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 토성 고리\n    if (p.ring) {\n      const ringGeo = new THREE.RingGeometry(p.size + 2, p.size + 6, 64);\n      const ringMat = new THREE.MeshBasicMaterial({ color: 0xd2b48c, side: THREE.DoubleSide });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      mesh.add(ring);\n    }\n\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 궤도\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = (i / segments) * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.2 });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n\n    return { ...p, mesh, angle: Math.random() * Math.PI * 2 };\n  });\n}\n\n// 행성 위치 업데이트\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n  });\n}\n\n// 은하 생성\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n  return new THREE.Points(\n    geometry,\n    new THREE.PointsMaterial({ size: 2, vertexColors: true })\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}