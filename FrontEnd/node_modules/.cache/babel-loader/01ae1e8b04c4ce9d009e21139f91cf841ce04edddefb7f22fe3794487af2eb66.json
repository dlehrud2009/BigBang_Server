{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ParticleCanvas({\n  stage,\n  setStage\n}) {\n  _s();\n  const mountRef = useRef();\n  const handleStageChange = newStage => setStage(newStage);\n\n  // 나선형 은하 생성 함수\n  const generateSpiralGalaxy = (numParticles = 1000000, arms = 3, radius = 5000) => {\n    const geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(numParticles * 3);\n    const colors = new Float32Array(numParticles * 3);\n    const color = new THREE.Color();\n    for (let i = 0; i < numParticles; i++) {\n      // 어떤 팔에 속할지\n      const arm = i % arms;\n      // 0~1 범위 안쪽 거리\n      const r = Math.random() * radius;\n      // 각 팔에서 회전\n      const angle = r / radius * Math.PI * 4 + arm * 2 * Math.PI / arms;\n      const x = r * Math.cos(angle) + (Math.random() - 0.5) * 50; // 약간 흔들림\n      const y = (Math.random() - 0.5) * 50; // 두께\n      const z = r * Math.sin(angle) + (Math.random() - 0.5) * 50;\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n      const c = 0.8 + Math.random() * 0.2; // 흰색 계열\n      color.setRGB(c, c, c);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n    }\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n    return new THREE.Points(geometry, new THREE.PointsMaterial({\n      size: 2,\n      vertexColors: true\n    }));\n  };\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 10000);\n    camera.position.z = 1200;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n    const pointLight = new THREE.PointLight(0xffffff, 3, 5000);\n    pointLight.position.set(0, 0, 0);\n    scene.add(pointLight);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n    let points = null;\n    let sun = null;\n    let planets = [];\n    const setupStage = () => {\n      scene.children.filter(obj => obj.userData.isStageObject).forEach(obj => scene.remove(obj));\n      points = null;\n      sun = null;\n      planets = [];\n      if (stage === \"bigbang\") {\n        // 구 안에서 입자 생성\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 1000000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 500;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.random() * Math.PI;\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        points = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true\n        }));\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n      if (stage === \"galaxy_formation\") {\n        points = generateSpiralGalaxy(50000, 4, 2000);\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n        planets = createPlanets(scene);\n        planets.forEach(p => {\n          p.mesh.userData.isStageObject = true;\n        });\n      }\n    };\n    setupStage();\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach(p => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy_formation\") && points) {\n        points.rotation.z += 0.001;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 100,\n        display: \"flex\",\n        gap: \"8px\",\n        pointerEvents: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"bigbang\"),\n        children: \"BigBang\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"galaxy_formation\"),\n        children: \"Galaxy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"solar_system\"),\n        children: \"SolarSystem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(ParticleCanvas, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ParticleCanvas;\nvar _c;\n$RefreshReg$(_c, \"ParticleCanvas\");","map":{"version":3,"names":["useRef","useEffect","THREE","OrbitControls","CSS2DRenderer","createSun","createPlanets","jsxDEV","_jsxDEV","ParticleCanvas","stage","setStage","_s","mountRef","handleStageChange","newStage","generateSpiralGalaxy","numParticles","arms","radius","geometry","BufferGeometry","positions","Float32Array","colors","color","Color","i","arm","r","Math","random","angle","PI","x","cos","y","z","sin","c","setRGB","g","b","setAttribute","BufferAttribute","Points","PointsMaterial","size","vertexColors","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","camera","PerspectiveCamera","position","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","labelRenderer","style","top","controls","enableDamping","enablePan","pointLight","PointLight","set","add","ambientLight","AmbientLight","points","sun","planets","setupStage","children","filter","obj","userData","isStageObject","forEach","remove","theta","phi","p","mesh","frameId","animate","rotation","speed","update","render","requestAnimationFrame","cancelAnimationFrame","dispose","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","left","zIndex","display","gap","pointerEvents","onClick","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx"],"sourcesContent":["// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\n\nexport default function ParticleCanvas({ stage, setStage }) {\n  const mountRef = useRef();\n\n  const handleStageChange = (newStage) => setStage(newStage);\n\n  // 나선형 은하 생성 함수\n  const generateSpiralGalaxy = (numParticles = 1000000, arms = 3, radius = 5000) => {\n    const geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(numParticles * 3);\n    const colors = new Float32Array(numParticles * 3);\n    const color = new THREE.Color();\n\n    for (let i = 0; i < numParticles; i++) {\n      // 어떤 팔에 속할지\n      const arm = i % arms;\n      // 0~1 범위 안쪽 거리\n      const r = Math.random() * radius;\n      // 각 팔에서 회전\n      const angle = (r / radius) * Math.PI * 4 + (arm * 2 * Math.PI) / arms;\n      const x = r * Math.cos(angle) + (Math.random() - 0.5) * 50; // 약간 흔들림\n      const y = (Math.random() - 0.5) * 50; // 두께\n      const z = r * Math.sin(angle) + (Math.random() - 0.5) * 50;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n\n      const c = 0.8 + Math.random() * 0.2; // 흰색 계열\n      color.setRGB(c, c, c);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n    }\n\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n    return new THREE.Points(\n      geometry,\n      new THREE.PointsMaterial({ size: 2, vertexColors: true })\n    );\n  };\n\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 10000);\n    camera.position.z = 1200;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n\n    const pointLight = new THREE.PointLight(0xffffff, 3, 5000);\n    pointLight.position.set(0, 0, 0);\n    scene.add(pointLight);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n\n    let points = null;\n    let sun = null;\n    let planets = [];\n\n    const setupStage = () => {\n      scene.children\n        .filter(obj => obj.userData.isStageObject)\n        .forEach(obj => scene.remove(obj));\n\n      points = null;\n      sun = null;\n      planets = [];\n\n      if (stage === \"bigbang\") {\n        // 구 안에서 입자 생성\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 1000000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 500;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.random() * Math.PI;\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        points = new THREE.Points(\n          geometry,\n          new THREE.PointsMaterial({ size: 2, vertexColors: true })\n        );\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n\n      if (stage === \"galaxy_formation\") {\n        points = generateSpiralGalaxy(50000, 4, 2000);\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n\n        planets = createPlanets(scene);\n        planets.forEach(p => {\n          p.mesh.userData.isStageObject = true;\n        });\n      }\n    };\n\n    setupStage();\n\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach(p => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy_formation\") && points) {\n        points.rotation.z += 0.001;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"600px\" }}>\n      <div ref={mountRef} style={{ width: \"100%\", height: \"100%\" }} />\n      <div\n        style={{\n          position: \"absolute\",\n          top: 10,\n          left: 10,\n          zIndex: 100,\n          display: \"flex\",\n          gap: \"8px\",\n          pointerEvents: \"auto\",\n        }}\n      >\n        <button onClick={() => handleStageChange(\"bigbang\")}>BigBang</button>\n        <button onClick={() => handleStageChange(\"galaxy_formation\")}>Galaxy</button>\n        <button onClick={() => handleStageChange(\"solar_system\")}>SolarSystem</button>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}