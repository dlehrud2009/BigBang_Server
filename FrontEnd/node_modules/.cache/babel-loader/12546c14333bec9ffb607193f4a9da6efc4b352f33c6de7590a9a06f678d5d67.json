{"ast":null,"code":"import{useState,useEffect,useRef}from\"react\";import axios from\"axios\";import{io}from\"socket.io-client\";import ParticleCanvas from\"./components/ParticleCanvas\";import UniverseSimulation from\"./components/UniverseSimulation\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){const[userid,setUserId]=useState(null);const[stage,setStage]=useState(\"bigbang\");const[status,setStatus]=useState(\"paused\");const socketRef=useRef();// ------------------------\n// 접속 시 사용자 생성\n// ------------------------\nuseEffect(()=>{const initUser=async()=>{try{const res=await axios.post(\"http://localhost:4000/api/user\",{username:\"Guest\"});setUserId(res.data.userid);// WebSocket 연결\nsocketRef.current=io(\"http://localhost:4000\");socketRef.current.emit(\"join\",res.data.userid);// 서버 상태 수신 (서버는 'stageUpdated'를 emit)\nsocketRef.current.on(\"stageUpdated\",data=>{setStage(data.stage);setStatus(data.status);});}catch(err){console.error(\"사용자 생성 실패:\",err);}};initUser();},[]);// ------------------------\n// 시뮬레이션 제어\n// ------------------------\nconst startSimulation=async()=>{if(!userid)return;await axios.post(\"http://localhost:4000/api/simulation/start\",{userid});setStatus(\"started\");setStage(\"bigbang\");socketRef.current.emit(\"start\",{userid});};const pauseSimulation=async()=>{if(!userid)return;const res=await axios.post(\"http://localhost:4000/api/simulation/pause\",{userid});setStatus(res.data.status);setStage(res.data.stage);socketRef.current.emit(\"pause\",{userid});};const changeStage=async newStage=>{if(!userid)return;await axios.post(\"http://localhost:4000/api/simulation/stage\",{userid,stage:newStage});setStage(newStage);// 서버 브로드캐스트는 REST로 처리되므로 별도 소켓 emit 불필요\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"BigBang Simulator\"}),/*#__PURE__*/_jsx(ParticleCanvas,{userid:userid,stage:stage,status:status,startSimulation:startSimulation,pauseSimulation:pauseSimulation,changeStage:changeStage}),process.env.NODE_ENV!==\"production\"&&/*#__PURE__*/_jsx(UniverseSimulation,{})]});}","map":{"version":3,"names":["useState","useEffect","useRef","axios","io","ParticleCanvas","UniverseSimulation","jsx","_jsx","jsxs","_jsxs","App","userid","setUserId","stage","setStage","status","setStatus","socketRef","initUser","res","post","username","data","current","emit","on","err","console","error","startSimulation","pauseSimulation","changeStage","newStage","children","process","env","NODE_ENV"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/App.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { io } from \"socket.io-client\";\nimport ParticleCanvas from \"./components/ParticleCanvas\";\nimport UniverseSimulation from \"./components/UniverseSimulation\";\n\nexport default function App() {\n  const [userid, setUserId] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n  const [status, setStatus] = useState(\"paused\");\n  const socketRef = useRef();\n\n  // ------------------------\n  // 접속 시 사용자 생성\n  // ------------------------\n  useEffect(() => {\n    const initUser = async () => {\n      try {\n        const res = await axios.post(\"http://localhost:4000/api/user\", {\n          username: \"Guest\",\n        });\n        setUserId(res.data.userid);\n\n        // WebSocket 연결\n        socketRef.current = io(\"http://localhost:4000\");\n        socketRef.current.emit(\"join\", res.data.userid);\n\n        // 서버 상태 수신 (서버는 'stageUpdated'를 emit)\n        socketRef.current.on(\"stageUpdated\", (data) => {\n          setStage(data.stage);\n          setStatus(data.status);\n        });\n      } catch (err) {\n        console.error(\"사용자 생성 실패:\", err);\n      }\n    };\n    initUser();\n  }, []);\n\n  // ------------------------\n  // 시뮬레이션 제어\n  // ------------------------\n  const startSimulation = async () => {\n    if (!userid) return;\n\n    await axios.post(\"http://localhost:4000/api/simulation/start\", { userid });\n    setStatus(\"started\");\n    setStage(\"bigbang\");\n    socketRef.current.emit(\"start\", { userid });\n  };\n\n  const pauseSimulation = async () => {\n    if (!userid) return;\n\n    const res = await axios.post(\"http://localhost:4000/api/simulation/pause\", {\n      userid,\n    });\n    setStatus(res.data.status);\n    setStage(res.data.stage);\n    socketRef.current.emit(\"pause\", { userid });\n  };\n\n  const changeStage = async (newStage) => {\n    if (!userid) return;\n\n    await axios.post(\"http://localhost:4000/api/simulation/stage\", { userid, stage: newStage });\n    setStage(newStage);\n    // 서버 브로드캐스트는 REST로 처리되므로 별도 소켓 emit 불필요\n  };\n\n  return (\n    <div>\n      <h1>BigBang Simulator</h1>\n      <ParticleCanvas\n        userid={userid}\n        stage={stage}\n        status={status}\n        startSimulation={startSimulation}\n        pauseSimulation={pauseSimulation}\n        changeStage={changeStage}\n      />\n      {process.env.NODE_ENV !== \"production\" && <UniverseSimulation />}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}