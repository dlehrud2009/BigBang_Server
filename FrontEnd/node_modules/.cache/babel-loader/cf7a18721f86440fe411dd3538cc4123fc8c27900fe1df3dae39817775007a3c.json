{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer, CSS2DObject } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ParticleCanvas({\n  stage,\n  setStage\n}) {\n  _s();\n  const mountRef = useRef();\n  const handleStageChange = newStage => setStage(newStage);\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n\n    // --- Scene & Camera ---\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.PerspectiveCamera(60, width / height, 1, 50000);\n    camera.position.set(0, 2500, 10000);\n\n    // --- Renderer ---\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n\n    // --- CSS2DRenderer for Labels ---\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n\n    // --- Controls ---\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n\n    // --- Lights ---\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n    let stageObject = null;\n    let sun = null;\n    let planets = [];\n\n    // --- Stage Setup ---\n    const setupStage = () => {\n      // 이전 stage 제거\n      scene.children.filter(obj => obj.userData.isStageObject).forEach(obj => scene.remove(obj));\n      stageObject = null;\n      sun = null;\n      planets = [];\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n        planets = createPlanets(scene, CSS2DObject); // 라벨 추가\n        planets.forEach(p => {\n          p.mesh.userData.isStageObject = true;\n        });\n\n        // 🌞 태양계 중심\n        camera.position.set(0, 500, 2500);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n      if (stage === \"bigbang\") {\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 800000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 3000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.random() * Math.PI;\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        stageObject = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true\n        }));\n        stageObject.userData.isStageObject = true;\n        scene.add(stageObject);\n\n        // 💥 빅뱅 입자 구 중심\n        camera.position.set(0, 0, 4000);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n      if (stage === \"galaxy_formation\") {\n        const group = new THREE.Group();\n\n        // ⭐ 별 구름\n        const numParticles = 400000;\n        const geometry = new THREE.BufferGeometry();\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 5000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.acos(Math.random() * 2 - 1);\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta) * 0.3;\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const palette = [0x88ccff, 0xaa88ff, 0xff88cc, 0xffffff];\n          color.setHex(palette[Math.floor(Math.random() * palette.length)]);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        const stars = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true,\n          blending: THREE.AdditiveBlending,\n          transparent: true,\n          opacity: 0.9\n        }));\n        group.add(stars);\n\n        // 블랙홀 코어\n        const core = new THREE.Mesh(new THREE.SphereGeometry(50, 32, 32), new THREE.MeshBasicMaterial({\n          color: 0xffffff,\n          transparent: true,\n          opacity: 0.9\n        }));\n        group.add(core);\n\n        // 위아래 제트 기둥\n        const jetMaterial = new THREE.MeshBasicMaterial({\n          color: 0x99ccff,\n          transparent: true,\n          opacity: 0.7\n        });\n        const jetGeometry = new THREE.CylinderGeometry(5, 30, 1000, 32, 1, true);\n        const jetUp = new THREE.Mesh(jetGeometry, jetMaterial);\n        jetUp.position.y = 500;\n        group.add(jetUp);\n        const jetDown = new THREE.Mesh(jetGeometry, jetMaterial);\n        jetDown.position.y = -500;\n        group.add(jetDown);\n        group.userData.isStageObject = true;\n        stageObject = group;\n        scene.add(stageObject);\n\n        // 🌌 은하 중심\n        camera.position.set(0, 200, 1500);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n    };\n    setupStage();\n\n    // --- Animate ---\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach(p => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy_formation\") && stageObject) {\n        stageObject.rotation.y += 0.0005;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 100,\n        display: \"flex\",\n        gap: \"8px\",\n        pointerEvents: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"bigbang\"),\n        children: \"BigBang\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"galaxy_formation\"),\n        children: \"Galaxy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"solar_system\"),\n        children: \"SolarSystem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n_s(ParticleCanvas, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ParticleCanvas;\nvar _c;\n$RefreshReg$(_c, \"ParticleCanvas\");","map":{"version":3,"names":["useRef","useEffect","THREE","OrbitControls","CSS2DRenderer","CSS2DObject","createSun","createPlanets","jsxDEV","_jsxDEV","ParticleCanvas","stage","setStage","_s","mountRef","handleStageChange","newStage","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","labelRenderer","style","top","controls","enableDamping","enablePan","ambientLight","AmbientLight","add","stageObject","sun","planets","setupStage","children","filter","obj","userData","isStageObject","forEach","remove","p","mesh","target","update","geometry","BufferGeometry","numParticles","positions","Float32Array","colors","color","i","r","Math","random","theta","PI","phi","sin","cos","c","setRGB","g","b","setAttribute","BufferAttribute","Points","PointsMaterial","size","vertexColors","group","Group","acos","palette","setHex","floor","length","stars","blending","AdditiveBlending","transparent","opacity","core","Mesh","SphereGeometry","MeshBasicMaterial","jetMaterial","jetGeometry","CylinderGeometry","jetUp","y","jetDown","frameId","animate","rotation","angle","speed","x","radius","z","render","requestAnimationFrame","cancelAnimationFrame","dispose","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","left","zIndex","display","gap","pointerEvents","onClick","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx"],"sourcesContent":["// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer, CSS2DObject } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\n\nexport default function ParticleCanvas({ stage, setStage }) {\n  const mountRef = useRef();\n\n  const handleStageChange = (newStage) => setStage(newStage);\n\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n\n    // --- Scene & Camera ---\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.PerspectiveCamera(60, width / height, 1, 50000);\n    camera.position.set(0, 2500, 10000);\n\n    // --- Renderer ---\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n\n    // --- CSS2DRenderer for Labels ---\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n\n    // --- Controls ---\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n\n    // --- Lights ---\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n\n    let stageObject = null;\n    let sun = null;\n    let planets = [];\n\n    // --- Stage Setup ---\n    const setupStage = () => {\n      // 이전 stage 제거\n      scene.children.filter((obj) => obj.userData.isStageObject).forEach((obj) => scene.remove(obj));\n      stageObject = null;\n      sun = null;\n      planets = [];\n\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n\n        planets = createPlanets(scene, CSS2DObject); // 라벨 추가\n        planets.forEach((p) => {\n          p.mesh.userData.isStageObject = true;\n        });\n\n        // 🌞 태양계 중심\n        camera.position.set(0, 500, 2500);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n\n      if (stage === \"bigbang\") {\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 800000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 3000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.random() * Math.PI;\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        stageObject = new THREE.Points(\n          geometry,\n          new THREE.PointsMaterial({ size: 2, vertexColors: true })\n        );\n        stageObject.userData.isStageObject = true;\n        scene.add(stageObject);\n\n        // 💥 빅뱅 입자 구 중심\n        camera.position.set(0, 0, 4000);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n\n      if (stage === \"galaxy_formation\") {\n        const group = new THREE.Group();\n\n        // ⭐ 별 구름\n        const numParticles = 400000;\n        const geometry = new THREE.BufferGeometry();\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 5000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.acos(Math.random() * 2 - 1);\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta) * 0.3;\n          positions[i * 3 + 2] = r * Math.cos(phi);\n\n          const palette = [0x88ccff, 0xaa88ff, 0xff88cc, 0xffffff];\n          color.setHex(palette[Math.floor(Math.random() * palette.length)]);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        const stars = new THREE.Points(\n          geometry,\n          new THREE.PointsMaterial({\n            size: 2,\n            vertexColors: true,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            opacity: 0.9,\n          })\n        );\n        group.add(stars);\n\n        // 블랙홀 코어\n        const core = new THREE.Mesh(\n          new THREE.SphereGeometry(50, 32, 32),\n          new THREE.MeshBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.9 })\n        );\n        group.add(core);\n\n        // 위아래 제트 기둥\n        const jetMaterial = new THREE.MeshBasicMaterial({ color: 0x99ccff, transparent: true, opacity: 0.7 });\n        const jetGeometry = new THREE.CylinderGeometry(5, 30, 1000, 32, 1, true);\n\n        const jetUp = new THREE.Mesh(jetGeometry, jetMaterial);\n        jetUp.position.y = 500;\n        group.add(jetUp);\n\n        const jetDown = new THREE.Mesh(jetGeometry, jetMaterial);\n        jetDown.position.y = -500;\n        group.add(jetDown);\n\n        group.userData.isStageObject = true;\n        stageObject = group;\n        scene.add(stageObject);\n\n        // 🌌 은하 중심\n        camera.position.set(0, 200, 1500);\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n    };\n\n    setupStage();\n\n    // --- Animate ---\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach((p) => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy_formation\") && stageObject) {\n        stageObject.rotation.y += 0.0005;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"600px\" }}>\n      <div ref={mountRef} style={{ width: \"100%\", height: \"100%\" }} />\n      <div\n        style={{\n          position: \"absolute\",\n          top: 10,\n          left: 10,\n          zIndex: 100,\n          display: \"flex\",\n          gap: \"8px\",\n          pointerEvents: \"auto\",\n        }}\n      >\n        <button onClick={() => handleStageChange(\"bigbang\")}>BigBang</button>\n        <button onClick={() => handleStageChange(\"galaxy_formation\")}>Galaxy</button>\n        <button onClick={() => handleStageChange(\"solar_system\")}>SolarSystem</button>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}