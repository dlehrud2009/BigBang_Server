{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport io from \"socket.io-client\";\nimport ParticleCanvas from \"./components/ParticleCanvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\");\nexport default function App() {\n  _s();\n  const [userid, setUserId] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n  useEffect(() => {\n    const initUser = async () => {\n      try {\n        const res = await axios.post(\"http://localhost:4000/api/user\", {\n          username: \"Guest\"\n        });\n        setUserId(res.data.userid);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    initUser();\n  }, []);\n\n  // WebSocket으로 stage 실시간 업데이트\n  useEffect(() => {\n    socket.on(\"stageUpdated\", ({\n      userid: u,\n      stage: s\n    }) => {\n      if (u === userid) setStage(s);\n    });\n    return () => socket.off(\"stageUpdated\");\n  }, [userid]);\n  const changeStage = async newStage => {\n    if (!userid) return;\n    try {\n      await axios.post(\"http://localhost:4000/api/simulation/stage\", {\n        userid,\n        stage: newStage\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"BigBang Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ParticleCanvas, {\n      userid: userid,\n      stage: stage,\n      setStage: setStage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tqYghzXXDeoR9q9xmtdlUkhUVF0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","axios","io","ParticleCanvas","jsxDEV","_jsxDEV","socket","App","_s","userid","setUserId","stage","setStage","initUser","res","post","username","data","err","console","error","on","u","s","off","changeStage","newStage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/App.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport io from \"socket.io-client\";\nimport ParticleCanvas from \"./components/ParticleCanvas\";\n\nconst socket = io(\"http://localhost:4000\");\n\nexport default function App() {\n  const [userid, setUserId] = useState(null);\n  const [stage, setStage] = useState(\"bigbang\");\n\n  useEffect(() => {\n    const initUser = async () => {\n      try {\n        const res = await axios.post(\"http://localhost:4000/api/user\", { username: \"Guest\" });\n        setUserId(res.data.userid);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    initUser();\n  }, []);\n\n  // WebSocket으로 stage 실시간 업데이트\n  useEffect(() => {\n    socket.on(\"stageUpdated\", ({ userid: u, stage: s }) => {\n      if (u === userid) setStage(s);\n    });\n    return () => socket.off(\"stageUpdated\");\n  }, [userid]);\n\n  const changeStage = async (newStage) => {\n    if (!userid) return;\n    try {\n      await axios.post(\"http://localhost:4000/api/simulation/stage\", { userid, stage: newStage });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div>\n      <h1>BigBang Simulator</h1>\n      <ParticleCanvas userid={userid} stage={stage} setStage={setStage} />\n    </div>\n  );\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,cAAc,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,eAAe,SAASK,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,SAAS,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,MAAMc,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,gCAAgC,EAAE;UAAEC,QAAQ,EAAE;QAAQ,CAAC,CAAC;QACrFN,SAAS,CAACI,GAAG,CAACG,IAAI,CAACR,MAAM,CAAC;MAC5B,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MACpB;IACF,CAAC;IACDL,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAd,SAAS,CAAC,MAAM;IACdO,MAAM,CAACe,EAAE,CAAC,cAAc,EAAE,CAAC;MAAEZ,MAAM,EAAEa,CAAC;MAAEX,KAAK,EAAEY;IAAE,CAAC,KAAK;MACrD,IAAID,CAAC,KAAKb,MAAM,EAAEG,QAAQ,CAACW,CAAC,CAAC;IAC/B,CAAC,CAAC;IACF,OAAO,MAAMjB,MAAM,CAACkB,GAAG,CAAC,cAAc,CAAC;EACzC,CAAC,EAAE,CAACf,MAAM,CAAC,CAAC;EAEZ,MAAMgB,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtC,IAAI,CAACjB,MAAM,EAAE;IACb,IAAI;MACF,MAAMR,KAAK,CAACc,IAAI,CAAC,4CAA4C,EAAE;QAAEN,MAAM;QAAEE,KAAK,EAAEe;MAAS,CAAC,CAAC;IAC7F,CAAC,CAAC,OAAOR,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IACpB;EACF,CAAC;EAED,oBACEb,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B1B,OAAA,CAACF,cAAc;MAACM,MAAM,EAAEA,MAAO;MAACE,KAAK,EAAEA,KAAM;MAACC,QAAQ,EAAEA;IAAS;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV;AAACvB,EAAA,CAvCuBD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}