{"ast":null,"code":"var _jsxFileName = \"/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ParticleCanvas({\n  stage,\n  setStage\n}) {\n  _s();\n  const mountRef = useRef();\n  const handleStageChange = newStage => setStage(newStage);\n\n  // üåå Í∞úÏÑ†Îêú ÎÇòÏÑ†Ìòï ÏùÄÌïò ÏÉùÏÑ± Ìï®Ïàò\n  const generateSpiralGalaxy = (numParticles = 300000, arms = 4, radius = 5000) => {\n    const geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(numParticles * 3);\n    const colors = new Float32Array(numParticles * 3);\n    const color = new THREE.Color();\n    for (let i = 0; i < numParticles; i++) {\n      const arm = i % arms;\n\n      // Ï§ëÏã¨Î∂ÄÏóê Î≥ÑÏù¥ Î™∞Î¶¨ÎèÑÎ°ù Ï†úÍ≥±Í∑º Î∂ÑÌè¨\n      const r = Math.pow(Math.random(), 0.5) * radius;\n\n      // ÏùÄÌïò Ìåî ÌúòÏñ¥Ïßê Ï†ïÎèÑ\n      const spiralFactor = 1.5;\n      const angle = r * 0.0025 * spiralFactor + arm * 2 * Math.PI / arms;\n      const x = Math.cos(angle) * r + (Math.random() - 0.5) * 50;\n      const y = (Math.random() - 0.5) * 100; // ÎëêÍªòÍ∞ê\n      const z = Math.sin(angle) * r + (Math.random() - 0.5) * 50;\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n\n      // ÏùÄÌïò ÏÉâÏÉÅ ÌåîÎ†àÌä∏\n      const palette = [new THREE.Color(0x88ccff),\n      // Ïó∞Ìïú ÌååÎûë\n      new THREE.Color(0xaa88ff),\n      // Î≥¥Îùº\n      new THREE.Color(0xff88cc),\n      // ÌïëÌÅ¨\n      new THREE.Color(0xffffff) // Ìù∞ÏÉâ\n      ];\n      const base = palette[Math.floor(Math.random() * palette.length)];\n\n      // Î∞ùÍ∏∞ ÎûúÎç§\n      const c = 0.6 + Math.random() * 0.4;\n      color.copy(base).multiplyScalar(c);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n    }\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n    return new THREE.Points(geometry, new THREE.PointsMaterial({\n      size: 2,\n      vertexColors: true,\n      blending: THREE.AdditiveBlending,\n      // ‚ú® Îπõ Î≤àÏßê Ìö®Í≥º\n      transparent: true,\n      opacity: 0.9\n    }));\n  };\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 10000);\n    camera.position.z = 1200;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n    const pointLight = new THREE.PointLight(0xffffff, 3, 5000);\n    pointLight.position.set(0, 0, 0);\n    scene.add(pointLight);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n    let points = null;\n    let sun = null;\n    let planets = [];\n    const setupStage = () => {\n      scene.children.filter(obj => obj.userData.isStageObject).forEach(obj => scene.remove(obj));\n      points = null;\n      sun = null;\n      planets = [];\n      if (stage === \"bigbang\") {\n        // üåç Íµ¨ ÏïàÏóêÏÑú ÏûÖÏûê ÏÉùÏÑ±\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 1000000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 3000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.random() * Math.PI;\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n        points = new THREE.Points(geometry, new THREE.PointsMaterial({\n          size: 2,\n          vertexColors: true\n        }));\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n      if (stage === \"galaxy_formation\") {\n        points = generateSpiralGalaxy(500000); // üåå ÎÇòÏÑ† ÏùÄÌïò ÏÉùÏÑ±\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n        planets = createPlanets(scene);\n        planets.forEach(p => {\n          p.mesh.userData.isStageObject = true;\n        });\n      }\n    };\n    setupStage();\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach(p => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy_formation\") && points) {\n        points.rotation.z += 0.001;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 100,\n        display: \"flex\",\n        gap: \"8px\",\n        pointerEvents: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"bigbang\"),\n        children: \"BigBang\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"galaxy_formation\"),\n        children: \"Galaxy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStageChange(\"solar_system\"),\n        children: \"SolarSystem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n_s(ParticleCanvas, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ParticleCanvas;\nvar _c;\n$RefreshReg$(_c, \"ParticleCanvas\");","map":{"version":3,"names":["useRef","useEffect","THREE","OrbitControls","CSS2DRenderer","createSun","createPlanets","jsxDEV","_jsxDEV","ParticleCanvas","stage","setStage","_s","mountRef","handleStageChange","newStage","generateSpiralGalaxy","numParticles","arms","radius","geometry","BufferGeometry","positions","Float32Array","colors","color","Color","i","arm","r","Math","pow","random","spiralFactor","angle","PI","x","cos","y","z","sin","palette","base","floor","length","c","copy","multiplyScalar","g","b","setAttribute","BufferAttribute","Points","PointsMaterial","size","vertexColors","blending","AdditiveBlending","transparent","opacity","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","camera","PerspectiveCamera","position","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","labelRenderer","style","top","controls","enableDamping","enablePan","pointLight","PointLight","set","add","ambientLight","AmbientLight","points","sun","planets","setupStage","children","filter","obj","userData","isStageObject","forEach","remove","theta","phi","setRGB","p","mesh","frameId","animate","rotation","speed","update","render","requestAnimationFrame","cancelAnimationFrame","dispose","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","left","zIndex","display","gap","pointerEvents","onClick","_c","$RefreshReg$"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/components/ParticleCanvas.jsx"],"sourcesContent":["// frontend/src/components/ParticleCanvas.jsx\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport { createSun, createPlanets } from \"../utils/solarSystem\";\n\nexport default function ParticleCanvas({ stage, setStage }) {\n  const mountRef = useRef();\n\n  const handleStageChange = (newStage) => setStage(newStage);\n\n  // üåå Í∞úÏÑ†Îêú ÎÇòÏÑ†Ìòï ÏùÄÌïò ÏÉùÏÑ± Ìï®Ïàò\n  const generateSpiralGalaxy = (\n    numParticles = 300000,\n    arms = 4,\n    radius = 5000\n  ) => {\n    const geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(numParticles * 3);\n    const colors = new Float32Array(numParticles * 3);\n    const color = new THREE.Color();\n\n    for (let i = 0; i < numParticles; i++) {\n      const arm = i % arms;\n\n      // Ï§ëÏã¨Î∂ÄÏóê Î≥ÑÏù¥ Î™∞Î¶¨ÎèÑÎ°ù Ï†úÍ≥±Í∑º Î∂ÑÌè¨\n      const r = Math.pow(Math.random(), 0.5) * radius;\n\n      // ÏùÄÌïò Ìåî ÌúòÏñ¥Ïßê Ï†ïÎèÑ\n      const spiralFactor = 1.5;\n      const angle = r * 0.0025 * spiralFactor + (arm * 2 * Math.PI) / arms;\n\n      const x =\n        Math.cos(angle) * r + (Math.random() - 0.5) * 50;\n      const y = (Math.random() - 0.5) * 100; // ÎëêÍªòÍ∞ê\n      const z =\n        Math.sin(angle) * r + (Math.random() - 0.5) * 50;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n\n      // ÏùÄÌïò ÏÉâÏÉÅ ÌåîÎ†àÌä∏\n      const palette = [\n        new THREE.Color(0x88ccff), // Ïó∞Ìïú ÌååÎûë\n        new THREE.Color(0xaa88ff), // Î≥¥Îùº\n        new THREE.Color(0xff88cc), // ÌïëÌÅ¨\n        new THREE.Color(0xffffff), // Ìù∞ÏÉâ\n      ];\n      const base = palette[Math.floor(Math.random() * palette.length)];\n\n      // Î∞ùÍ∏∞ ÎûúÎç§\n      const c = 0.6 + Math.random() * 0.4;\n      color.copy(base).multiplyScalar(c);\n\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n    }\n\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n    return new THREE.Points(\n      geometry,\n      new THREE.PointsMaterial({\n        size: 2,\n        vertexColors: true,\n        blending: THREE.AdditiveBlending, // ‚ú® Îπõ Î≤àÏßê Ìö®Í≥º\n        transparent: true,\n        opacity: 0.9,\n      })\n    );\n  };\n\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n\n    const width = mount.clientWidth;\n    const height = mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 10000);\n    camera.position.z = 1200;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    mount.appendChild(renderer.domElement);\n\n    const labelRenderer = new CSS2DRenderer();\n    labelRenderer.setSize(width, height);\n    labelRenderer.domElement.style.position = \"absolute\";\n    labelRenderer.domElement.style.top = \"0\";\n    mount.appendChild(labelRenderer.domElement);\n\n    const controls = new OrbitControls(camera, labelRenderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n\n    const pointLight = new THREE.PointLight(0xffffff, 3, 5000);\n    pointLight.position.set(0, 0, 0);\n    scene.add(pointLight);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\n    scene.add(ambientLight);\n\n    let points = null;\n    let sun = null;\n    let planets = [];\n\n    const setupStage = () => {\n      scene.children\n        .filter((obj) => obj.userData.isStageObject)\n        .forEach((obj) => scene.remove(obj));\n\n      points = null;\n      sun = null;\n      planets = [];\n\n      if (stage === \"bigbang\") {\n        // üåç Íµ¨ ÏïàÏóêÏÑú ÏûÖÏûê ÏÉùÏÑ±\n        const geometry = new THREE.BufferGeometry();\n        const numParticles = 1000000;\n        const positions = new Float32Array(numParticles * 3);\n        const colors = new Float32Array(numParticles * 3);\n        const color = new THREE.Color();\n\n        for (let i = 0; i < numParticles; i++) {\n          const r = Math.random() * 3000;\n          const theta = Math.random() * Math.PI * 2;\n          const phi = Math.random() * Math.PI;\n          positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);\n          positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);\n          positions[i * 3 + 2] = r * Math.cos(phi);\n\n          const c = Math.random();\n          color.setRGB(c, c, c);\n          colors[i * 3] = color.r;\n          colors[i * 3 + 1] = color.g;\n          colors[i * 3 + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n        points = new THREE.Points(\n          geometry,\n          new THREE.PointsMaterial({ size: 2, vertexColors: true })\n        );\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n\n      if (stage === \"galaxy_formation\") {\n        points = generateSpiralGalaxy(500000); // üåå ÎÇòÏÑ† ÏùÄÌïò ÏÉùÏÑ±\n        points.userData.isStageObject = true;\n        scene.add(points);\n      }\n\n      if (stage === \"solar_system\") {\n        sun = createSun();\n        sun.userData.isStageObject = true;\n        scene.add(sun);\n\n        planets = createPlanets(scene);\n        planets.forEach((p) => {\n          p.mesh.userData.isStageObject = true;\n        });\n      }\n    };\n\n    setupStage();\n\n    let frameId;\n    const animate = () => {\n      if (stage === \"solar_system\" && sun) {\n        sun.rotation.y += 0.002;\n        planets.forEach((p) => {\n          p.angle += p.speed;\n          p.mesh.position.x = p.radius * Math.cos(p.angle);\n          p.mesh.position.z = p.radius * Math.sin(p.angle);\n        });\n      } else if ((stage === \"bigbang\" || stage === \"galaxy_formation\") && points) {\n        points.rotation.z += 0.001;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n      labelRenderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    return () => {\n      cancelAnimationFrame(frameId);\n      renderer.dispose();\n      mount.removeChild(renderer.domElement);\n      mount.removeChild(labelRenderer.domElement);\n    };\n  }, [stage]);\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"600px\" }}>\n      <div ref={mountRef} style={{ width: \"100%\", height: \"100%\" }} />\n      <div\n        style={{\n          position: \"absolute\",\n          top: 10,\n          left: 10,\n          zIndex: 100,\n          display: \"flex\",\n          gap: \"8px\",\n          pointerEvents: \"auto\",\n        }}\n      >\n        <button onClick={() => handleStageChange(\"bigbang\")}>BigBang</button>\n        <button onClick={() => handleStageChange(\"galaxy_formation\")}>Galaxy</button>\n        <button onClick={() => handleStageChange(\"solar_system\")}>SolarSystem</button>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}