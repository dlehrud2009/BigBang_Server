{"ast":null,"code":"import _objectSpread from\"/Users/cellia/Desktop/bigbang/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import*as THREE from\"three\";// 태양계 행성 데이터\nexport const solarSystemPlanets=[{name:\"Mercury\",radius:60,size:3,color:0x888888,speed:0.02},{name:\"Venus\",radius:90,size:6,color:0xffa500,speed:0.015},{name:\"Earth\",radius:120,size:7,color:0x00bfff,speed:0.01},{name:\"Mars\",radius:150,size:5,color:0xff0000,speed:0.008},{name:\"Jupiter\",radius:190,size:12,color:0x8b4513,speed:0.005},{name:\"Saturn\",radius:230,size:10,color:0xdaa520,speed:0.004,ring:true},{name:\"Uranus\",radius:270,size:9,color:0xadd8e6,speed:0.003},{name:\"Neptune\",radius:310,size:9,color:0x00008b,speed:0.0025}];// 태양 생성\nexport function createSun(){const geo=new THREE.SphereGeometry(50,32,32);const mat=new THREE.MeshStandardMaterial({color:0xffff00,emissive:0xffff33,emissiveIntensity:1,metalness:0,roughness:0.4});const mesh=new THREE.Mesh(geo,mat);mesh.userData.isSun=true;return mesh;}// 행성 생성\nexport function createPlanets(scene){return solarSystemPlanets.map(p=>{const geo=new THREE.SphereGeometry(p.size,32,32);const mat=new THREE.MeshStandardMaterial({color:p.color,metalness:0,roughness:0.4});const mesh=new THREE.Mesh(geo,mat);// 토성 고리\nif(p.ring){const ringGeo=new THREE.RingGeometry(p.size+2,p.size+6,64);const ringMat=new THREE.MeshBasicMaterial({color:0xd2b48c,side:THREE.DoubleSide});const ring=new THREE.Mesh(ringGeo,ringMat);ring.rotation.x=-Math.PI/2;mesh.add(ring);}mesh.userData.isPlanet=true;scene.add(mesh);// 궤도\nconst segments=128;const orbitPositions=[];for(let i=0;i<=segments;i++){const theta=i/segments*2*Math.PI;orbitPositions.push(p.radius*Math.cos(theta),0,p.radius*Math.sin(theta));}const orbitGeo=new THREE.BufferGeometry();orbitGeo.setAttribute(\"position\",new THREE.Float32BufferAttribute(orbitPositions,3));const orbitMat=new THREE.LineBasicMaterial({color:0xffffff,transparent:true,opacity:0.2});const orbitLine=new THREE.LineLoop(orbitGeo,orbitMat);orbitLine.userData.isOrbit=true;scene.add(orbitLine);return _objectSpread(_objectSpread({},p),{},{mesh,angle:Math.random()*Math.PI*2});});}// 행성 위치 업데이트\nexport function updatePlanetPositions(planets){planets.forEach(p=>{p.angle+=p.speed;p.mesh.position.x=p.radius*Math.cos(p.angle);p.mesh.position.z=p.radius*Math.sin(p.angle);});}// 은하 생성\nexport function generateGalaxy(){let numStars=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5000;const geometry=new THREE.BufferGeometry();const positions=new Float32Array(numStars*3);const colors=new Float32Array(numStars*3);const color=new THREE.Color();for(let i=0;i<numStars;i++){const branch=i%4;const radius=Math.random()*400;const angle=radius*0.1+branch*Math.PI/2;const spread=(Math.random()-0.5)*15;positions[i*3]=radius*Math.cos(angle)+spread;positions[i*3+1]=(Math.random()-0.5)*50;positions[i*3+2]=radius*Math.sin(angle)+spread;const c=Math.random()*0.8+0.2;color.setRGB(c,c,c);colors[i*3]=color.r;colors[i*3+1]=color.g;colors[i*3+2]=color.b;}geometry.setAttribute(\"position\",new THREE.BufferAttribute(positions,3));geometry.setAttribute(\"color\",new THREE.BufferAttribute(colors,3));return new THREE.Points(geometry,new THREE.PointsMaterial({size:2,vertexColors:true}));}","map":{"version":3,"names":["THREE","solarSystemPlanets","name","radius","size","color","speed","ring","createSun","geo","SphereGeometry","mat","MeshStandardMaterial","emissive","emissiveIntensity","metalness","roughness","mesh","Mesh","userData","isSun","createPlanets","scene","map","p","ringGeo","RingGeometry","ringMat","MeshBasicMaterial","side","DoubleSide","rotation","x","Math","PI","add","isPlanet","segments","orbitPositions","i","theta","push","cos","sin","orbitGeo","BufferGeometry","setAttribute","Float32BufferAttribute","orbitMat","LineBasicMaterial","transparent","opacity","orbitLine","LineLoop","isOrbit","_objectSpread","angle","random","updatePlanetPositions","planets","forEach","position","z","generateGalaxy","numStars","arguments","length","undefined","geometry","positions","Float32Array","colors","Color","branch","spread","c","setRGB","r","g","b","BufferAttribute","Points","PointsMaterial","vertexColors"],"sources":["/Users/cellia/Desktop/bigbang/FrontEnd/src/utils/solarSystem.js"],"sourcesContent":["import * as THREE from \"three\";\n\n// 태양계 행성 데이터\nexport const solarSystemPlanets = [\n  { name: \"Mercury\", radius: 60, size: 3, color: 0x888888, speed: 0.02 },\n  { name: \"Venus\", radius: 90, size: 6, color: 0xffa500, speed: 0.015 },\n  { name: \"Earth\", radius: 120, size: 7, color: 0x00bfff, speed: 0.01 },\n  { name: \"Mars\", radius: 150, size: 5, color: 0xff0000, speed: 0.008 },\n  { name: \"Jupiter\", radius: 190, size: 12, color: 0x8b4513, speed: 0.005 },\n  { name: \"Saturn\", radius: 230, size: 10, color: 0xdaa520, speed: 0.004, ring: true },\n  { name: \"Uranus\", radius: 270, size: 9, color: 0xadd8e6, speed: 0.003 },\n  { name: \"Neptune\", radius: 310, size: 9, color: 0x00008b, speed: 0.0025 },\n];\n\n// 태양 생성\nexport function createSun() {\n  const geo = new THREE.SphereGeometry(50, 32, 32);\n  const mat = new THREE.MeshStandardMaterial({\n    color: 0xffff00,\n    emissive: 0xffff33,\n    emissiveIntensity: 1,\n    metalness: 0,\n    roughness: 0.4,\n  });\n  const mesh = new THREE.Mesh(geo, mat);\n  mesh.userData.isSun = true;\n  return mesh;\n}\n\n// 행성 생성\nexport function createPlanets(scene) {\n  return solarSystemPlanets.map(p => {\n    const geo = new THREE.SphereGeometry(p.size, 32, 32);\n    const mat = new THREE.MeshStandardMaterial({\n      color: p.color,\n      metalness: 0,\n      roughness: 0.4,\n    });\n    const mesh = new THREE.Mesh(geo, mat);\n\n    // 토성 고리\n    if (p.ring) {\n      const ringGeo = new THREE.RingGeometry(p.size + 2, p.size + 6, 64);\n      const ringMat = new THREE.MeshBasicMaterial({ color: 0xd2b48c, side: THREE.DoubleSide });\n      const ring = new THREE.Mesh(ringGeo, ringMat);\n      ring.rotation.x = -Math.PI / 2;\n      mesh.add(ring);\n    }\n\n    mesh.userData.isPlanet = true;\n    scene.add(mesh);\n\n    // 궤도\n    const segments = 128;\n    const orbitPositions = [];\n    for (let i = 0; i <= segments; i++) {\n      const theta = (i / segments) * 2 * Math.PI;\n      orbitPositions.push(p.radius * Math.cos(theta), 0, p.radius * Math.sin(theta));\n    }\n    const orbitGeo = new THREE.BufferGeometry();\n    orbitGeo.setAttribute(\"position\", new THREE.Float32BufferAttribute(orbitPositions, 3));\n    const orbitMat = new THREE.LineBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.2 });\n    const orbitLine = new THREE.LineLoop(orbitGeo, orbitMat);\n    orbitLine.userData.isOrbit = true;\n    scene.add(orbitLine);\n\n    return { ...p, mesh, angle: Math.random() * Math.PI * 2 };\n  });\n}\n\n// 행성 위치 업데이트\nexport function updatePlanetPositions(planets) {\n  planets.forEach(p => {\n    p.angle += p.speed;\n    p.mesh.position.x = p.radius * Math.cos(p.angle);\n    p.mesh.position.z = p.radius * Math.sin(p.angle);\n  });\n}\n\n// 은하 생성\nexport function generateGalaxy(numStars = 5000) {\n  const geometry = new THREE.BufferGeometry();\n  const positions = new Float32Array(numStars * 3);\n  const colors = new Float32Array(numStars * 3);\n  const color = new THREE.Color();\n\n  for (let i = 0; i < numStars; i++) {\n    const branch = i % 4;\n    const radius = Math.random() * 400;\n    const angle = radius * 0.1 + branch * Math.PI / 2;\n    const spread = (Math.random() - 0.5) * 15;\n\n    positions[i * 3] = radius * Math.cos(angle) + spread;\n    positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n    positions[i * 3 + 2] = radius * Math.sin(angle) + spread;\n\n    const c = Math.random() * 0.8 + 0.2;\n    color.setRGB(c, c, c);\n    colors[i * 3] = color.r;\n    colors[i * 3 + 1] = color.g;\n    colors[i * 3 + 2] = color.b;\n  }\n\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n  geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n  return new THREE.Points(\n    geometry,\n    new THREE.PointsMaterial({ size: 2, vertexColors: true })\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}